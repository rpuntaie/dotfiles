" vim: syntax=vim

""
" build with python 3.x:
" ./configure --enable-pythoninterp --enable-python3interp --enable-cscope \
" --enable-gui=gtk2 --with-features=big --enable-netbeans --with-tlib=ncurses
"
" pacman --noconfirm -S \
" vim-spell-en vim-spell-de vim-spell-it vim-spell-fr vim-spell-ru vim-spell-es
"
" system:
"   https://github.com/rpuntaie/rollarch
"   https://github.com/rpuntaie/dotfiles
"   - python with vim_py3_rst
"   - cscope
"   - wordnet
"   - rst2confluence
"   - waf
"
" <ESC> mapped to <CAPSLOCK> in the OS
"
" doc/myvimrc.txt.stpl uses """, "": and """ lines
""


""|
""| Links to plugin mappings::
""| 

set encoding=utf-8
scriptencoding utf-8 " else listchars problem on Windows

set nocompatible

let mapleader = ","
let maplocalleader = ","
noremap \ ,

if has('win32')
  let g:localvimfiles=$HOME.'/vimfiles'
  let $MYVIMRC=g:localvimfiles.'/vimrc'
else
  let $MYVIMRC=$XDG_CONFIG_HOME.'/vim/vimrc'
  let g:localvimfiles=$XDG_STATE_HOME.'/vim'
endif
let g:bundledir=g:localvimfiles.'/dein'
set undofile
let &undodir=g:localvimfiles.'/undo'
if !has('win32')
  " XDG Environment
  " https://tlvince.com/vim-respect-xdg
  set directory=$XDG_STATE_HOME/vim,~/,/tmp
  set backupdir=$XDG_STATE_HOME/vim,~/,/tmp
  if has('nvim')
    set viminfo+=n$XDG_STATE_HOME/vim/nviminfo
  else
    set viminfo+=n$XDG_STATE_HOME/vim/viminfo
  endif
  set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM/vimfiles,$VIMRUNTIME
endif

"ctrlpvim/ctrlp.vim
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.git|\.hg|\.svn|temp|tmp|build)$',
  \ 'file': '\v\.(exe|so|dll)$'
  \ }
"junegunn/fzf.vim
""" `<C-{fg}>`: fzf Files GFiles
map <C-f> :Files<CR>
map <C-g> :GFiles<CR>
""" `,bb`: fzf Buffers
map <leader>bb :Buffers<CR>
""" `,hh`: fzf History
map <leader>hh :History<CR>
""" `,{.;:/}`: fzf Buffer tags, tags, : or / history
map <leader>. :BTags<CR>
map <leader>; :Tags<CR>
map <leader>: :History:<CR>
map <leader>/ :History/<CR>
"godlygeek/tabular
""" `,aa`: :Tabular
map <leader>aa :Tab/
"machakann/vim-sandwich
""" `s{bl}`: make rst bold|literal
nmap sl saiw`.
nmap sb saiw*.
"Shougo/deoplete.nvim
let g:deoplete#enable_at_startup = 1
"SirVer/ultisnips
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsListSnippets = '<c-tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
"sheerun/vim-polyglot
"https://github.com/sheerun/vim-polyglot/issues/204
let g:polyglot_disabled = ['latex']
"w0rp/ale
let g:ale_enabled=0 " :ALEToggle
"python-mode/python-mode
let g:pymode_lint = 0
let g:pymode_folding = 0
let g:pymode_lint_write = 0
"lervag/vimtex
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'
"johnsyweb/vim-makeshift
let g:makeshift_on_startup = 0
let g:makeshift_on_bufread = 0
let g:makeshift_on_bufnewfile = 0
let g:makeshift_on_bufenter = 0
let g:makeshift_systems = {
    \'CMakeList.txt': 'cmake',
    \'meson.build': 'meson',
    \'build.sbt ': 'sbt',
    \'dodo.py ': 'doit',
    \'boost-build.jam ': 'b2',
    \}
function! s:BuildFun(what2build)
    execute 'Makeshift'
    execute 'MakeshiftBuild '.a:what2build
endfunction
"": `:MM` build using Makeshift
command! -nargs=* MM :call s:BuildFun(<q-args>)
"scrooloose/nerdtree
let g:NERDTreeNodeDelimiter = "\u00a0"
let g:NERDTreeShowHidden=1
""" `sn`: NERDTreeToggle
nmap sn :NERDTreeToggle<CR>
let g:netrw_shq="'"
let g:netrw_browsex_viewer= "xdg-open"
let g:netrw_nogx=1 " disable netrw's gx mapping.
let g:netrw_altv = 1
let g:netrw_preview = 1
let g:netrw_list_hide = "^\\..*"
let g:netrw_home = $XDG_STATE_HOME.'/vim'
""" `gx`: open browser and search
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
"vim-scripts/vcscommand.vim
let g:VCSCommandMapPrefix = "<leader>z"
"rpuntaie/trans.vim
let g:trans_default_api='google'
let g:trans_default_lang='ru'
let g:trans_set_reg='*'
let g:trans_set_echo=1
let g:trans_replace=0
let g:trans_has_python=3 "webapi.vim instead
"Rykka/mathematic.vim
let g:mathematic_user_dir = g:bundledir.
  \ '/repos/github.com/Rykka/mathematic.vim/keymap/mathematic.vim'
function Deinplugins()
    call dein#add('bogado/file-line') " open <file>:<line>
    call dein#add('chikamichi/mediawiki.vim') " syntax .mw .wiki .mediawiki
""| |tlib|  TScratch TBrowseOutput
    call dein#add('tomtom/tlib_vim')
""| |bufexplorer-usage|  ,bt
    call dein#add('jlanzarotta/bufexplorer')
""| |ctrlp-mappings| <c-p>
    call dein#add('ctrlpvim/ctrlp.vim')
""| |fzf-vim-commands| :Snippets :Helptags :Marks |myvmimaps|
    call dein#add('junegunn/fzf.vim')
""| |sleuth| detect tab settings heuristically, :Sleuth
    call dein#add('tpope/vim-sleuth') 
""| |:Tabularize| format
    call dein#add('godlygeek/tabular')
""| |sandwich-keymappings| sa sd sr
    call dein#add('machakann/vim-sandwich') 
""| |easymotion-default-mappings| ,,{fFtTwWbB(g)eEjknN}
    call dein#add('Lokaltog/vim-easymotion') " <leader><leader>f
""| |matchup-default-mappings|  % {gv[]zai(ds)(cs}%
    call dein#add('andymass/vim-matchup') 
""| |deoplete-functions| complete using |deoplete-sources|
    call dein#add('Shougo/deoplete.nvim')
    if !has('nvim')
      call dein#add('roxma/nvim-yarp')
      call dein#add('roxma/vim-hug-neovim-rpc')
    endif
    "deoplete sources
    call dein#add('prabirshrestha/vim-lsp')
    call dein#add('lighttiger2505/deoplete-vim-lsp')
    call dein#add('Shougo/neoinclude.vim')
    call dein#add('Shougo/deoplete-clangx')
    call dein#add('davidhalter/jedi')
    call dein#add('deoplete-plugins/deoplete-jedi')
    "snippets
""| |UltiSnips| snippets
    call dein#add('SirVer/ultisnips')
    call dein#add('honza/vim-snippets')
    "languages
    call dein#add('sheerun/vim-polyglot')
    call dein#add('Chiel92/vim-autoformat') " :Autoformat
    call dein#add('metakirby5/codi.vim') " :Codi :Codi!
""| |AleToggle| linting
    call dein#add('w0rp/ale')
    "python
""| |vim_py3_rst| python and rst helpers
    call dein#add('rpuntaie/vim_py3_rst')
    "call dein#add('python-mode/python-mode')
""| |Nvim-R-use| R
    call dein#add('jalvesaq/Nvim-R')
    "debug
    call dein#add('Shougo/vimproc.vim')
    call dein#add('idanarye/vim-vebugger')
    call dein#add('vim-vdebug/vdebug')
    "latex
    call dein#add('lervag/vimtex')
    "building
    call dein#add('johnsyweb/vim-makeshift') " Build
    call dein#add('scrooloose/nerdtree')
    call dein#add('tyru/open-browser.vim')
    "commenting
    call dein#add('scrooloose/nerdcommenter')
    "git tools
""| |fugitive-commands|
    call dein#add('tpope/vim-fugitive')
    call dein#add('gregsexton/gitv') " needs fugitive
    "other vcs
""| |vcscommand-mappings|
    call dein#add('vim-scripts/vcscommand.vim')
    "dictionary
    call dein#add('mattn/webapi-vim')
    call dein#add('rpuntaie/trans.vim')
    call dein#add('Rykka/mathematic.vim')
    call dein#add('chrisbra/unicode.vim')
endfunction
let g:bundleinit=0
if has('vim_starting')
    if isdirectory(g:bundledir.'/repos')
        let g:bundleinit=1
    endif
    let g:dein_url='https://github.com/Shougo/dein.vim'
    let g:dein_path=g:bundledir.'/repos/github.com/Shougo/dein.vim'
    if g:bundleinit==0
        let g:bundleinit=2
        call mkdir(g:bundledir, 'p', 0700)
        execute '!git clone '.g:dein_url.' '.g:dein_path
    endif
    let &runtimepath=&runtimepath.','.g:dein_path
    if dein#load_state(g:bundledir)
        call dein#begin(g:bundledir)
        call dein#add(g:dein_path)

        call Deinplugins()

        call dein#end()
        call dein#save_state()
    endif
    if g:bundleinit==2
        call dein#install()
    endif
endif
"call dein#check_clean()
"call dein#update()
"call dein#install()

if isdirectory($MY)
    cd $MY
endif

