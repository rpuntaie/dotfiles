{{project_name}}
    ├─ Dockerfile
          FROM golang:1.22.2
          RUN apt-get update \
              && apt-get install -y --no-install-recommends \
              curl git jq make protobuf-compiler xz-utils sudo python3-pip \
              && rm -rf /var/cache/apt/lists
          RUN mkdir /{{project_name}}
          RUN git config --global --add safe.directory /{{project_name}}
          WORKDIR /{{project_name}}
          EXPOSE 8545 8546
    ├─ .gitignore
          {{project_name}}
    ├─ Makefile
          VERSION := $(shell grep "const Version " version/version.go | sed -E 's/.*"(.+)"$$/\1/')
          GIT_COMMIT=$(shell git rev-parse HEAD)
          GIT_DIRTY=$(shell test -n "`git status --porcelain`" && echo "+CHANGES" || true)
          BUILD_DATE=$(shell date '+%Y-%m-%d-%H:%M:%S')
    
          default: test
    
          .PHONY: build
          build:
          	. ./commands.sh && zbuild
    
          .PHONY: image
          image:
          	. ./commands.sh && zimage
    
          .PHONY: dockerbuild
          dockerbuild: image
          	. ./commands.sh && zdockerbuild
    
          .PHONY: docker
          docker: dockerbuild
          	. ./commands.sh && zdocker
    
          .PHONY: clean
          clean:
          	. ./commands.sh && zclean
    
          .PHONY: test
          test:
          	. ./commands.sh && ztest
    
    ├─ cmd/
    │  ├─ root.go
             package cmd
    
             import (
             	"fmt"
             	"os"
    
             	"github.com/spf13/cobra"
             	"github.com/{{project_name}}/{{project_name}}/log"
             )
    
             var cfgFile string
    
             // rootCmd represents the base command when called without any subcommands
             var rootCmd = &cobra.Command{
             	Use:   "{{project_name}} code example",
             	Short: "A brief description of your application",
             	Long: `A longer description that spans multiple lines and likely contains
             examples and usage of using your application. For example:
    
             Cobra is a CLI library for Go that empowers applications.`,
             }
    
             // Execute adds all child commands to the root command and sets flags appropriately.
             // This is called by main.main(). It only needs to happen once to the rootCmd.
             func Execute() {
             	if err := rootCmd.Execute(); err != nil {
             		fmt.Println(err)
             		os.Exit(1)
             	}
             }
    
             func init() {
             	cobra.OnInitialize()
    
             	log.Infoln("Initialization Log")
    
             	// Cobra also supports local flags, which will only run
             	// when this action is called directly.
             	// rootCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
    
             }
    │  └─ version.go
             package cmd
    
             import (
             	"fmt"
    
             	"github.com/spf13/cobra"
             	"github.com/{{project_name}}/{{project_name}}/version"
             )
    
             // versionCmd represents the version command
             var versionCmd = &cobra.Command{
             	Use:   "version",
             	Short: "Print the version number",
             	Long:  `All software has versions`,
             	Run: func(cmd *cobra.Command, args []string) {
             		fmt.Println("Build Date:", version.BuildDate)
             		fmt.Println("Git Commit:", version.GitCommit)
             		fmt.Println("Version:", version.Version)
             		fmt.Println("Go Version:", version.GoVersion)
             		fmt.Println("OS / Arch:", version.OsArch)
             	},
             }
    
             func init() {
             	rootCmd.AddCommand(versionCmd)
             }
    ├─ commands.sh
          #!/usr/bin/env bash
    
          THS="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
    
          VERSION=$(grep "const Version " version/version.go | sed -E 's/.*"(.+)"$/\1/')
          echo $VERSION
          GIT_COMMIT=$(git rev-parse HEAD)
          echo $GIT_COMMIT
          GIT_DIRTY=$(test -n "`git status --porcelain`" && echo "+CHANGES" || true)
          echo $GIT_DIRTY
          BUILD_DATE=$(date '+%Y-%m-%d-%H:%M:%S')
          echo $BUILD_DATE
    
          zbuild() {
          go build -ldflags "-X github.com/{{project_name}}/{{project_name}}/version.GitCommit=${GIT_COMMIT}${GIT_DIRTY} -X github.com/{{project_name}}/{{project_name}}/version.BuildDate=${BUILD_DATE}"
          }
    
          zimage() {
          docker build --build-arg VERSION=${VERSION} --build-arg GIT_COMMIT=$(GIT_COMMIT) -t {{project_name}} .
          }
    
          zdockerbuild(){
          docker run -it --rm -v ${THS:-$(pwd)}:/{{project_name}} {{project_name}} go build
          }
    
          zdocker(){
          docker run -it -v ${THS:-$(pwd)}:/{{project_name}} {{project_name}} bash
          }
    
          zclean(){
          test ! -e {{project_name}} || rm {{project_name}}
          }
    
          ztest(){
          go test ./...
          }
    
    ├─ config/
    │  └─ config.go
             package config
    
             import (
             	"time"
    
             	"github.com/spf13/viper"
             )
    
             // Provider defines a set of read-only methods for accessing the application
             // configuration params as defined in one of the config files.
             type Provider interface {
             	ConfigFileUsed() string
             	Get(key string) interface{}
             	GetBool(key string) bool
             	GetDuration(key string) time.Duration
             	GetFloat64(key string) float64
             	GetInt(key string) int
             	GetInt64(key string) int64
             	GetSizeInBytes(key string) uint
             	GetString(key string) string
             	GetStringMap(key string) map[string]interface{}
             	GetStringMapString(key string) map[string]string
             	GetStringMapStringSlice(key string) map[string][]string
             	GetStringSlice(key string) []string
             	GetTime(key string) time.Time
             	InConfig(key string) bool
             	IsSet(key string) bool
             }
    
             var defaultConfig *viper.Viper
    
             // Config returns a default config providers
             func Config() Provider {
             	return defaultConfig
             }
    
             // LoadConfigProvider returns a configured viper instance
             func LoadConfigProvider(appName string) Provider {
             	return readViperConfig(appName)
             }
    
             func init() {
             	defaultConfig = readViperConfig("{{project_name}}")
             }
    
             func readViperConfig(appName string) *viper.Viper {
             	v := viper.New()
             	v.SetEnvPrefix(appName)
             	v.AutomaticEnv()
    
             	// global defaults
    
             	v.SetDefault("json_logs", false)
             	v.SetDefault("loglevel", "debug")
    
             	return v
             }
    ├─ go.mod
          module github.com/{{project_name}}/{{project_name}}
    
          go 1.22.2
    
          require (
          	github.com/sirupsen/logrus latest
          	github.com/spf13/cobra latest
          	github.com/spf13/viper latest
          )
    ├─ log/
    │  └─ log_test.go
              package log
              
              import (
              	"testing"
              
              	. "gopkg.in/check.v1"
              )
              
              func TestPackage(t *testing.T) { TestingT(t) }
              
              type LogSuite struct{}
              
              var _ = Suite(&LogSuite{})
              
              func (s LogSuite) TestQuery(c *C) {
              	c.Check(1, Equals, 1)
              }
    │  └─ log.go
             package log
    
             import (
             	"os"
    
             	"github.com/sirupsen/logrus"
             	"github.com/{{project_name}}/{{project_name}}/config"
             )
    
             // Logger defines a set of methods for writing application logs. Derived from and
             // inspired by logrus.Entry.
             type Logger interface {
             	Debug(args ...interface{})
             	Debugf(format string, args ...interface{})
             	Debugln(args ...interface{})
             	Error(args ...interface{})
             	Errorf(format string, args ...interface{})
             	Errorln(args ...interface{})
             	Fatal(args ...interface{})
             	Fatalf(format string, args ...interface{})
             	Fatalln(args ...interface{})
             	Info(args ...interface{})
             	Infof(format string, args ...interface{})
             	Infoln(args ...interface{})
             	Panic(args ...interface{})
             	Panicf(format string, args ...interface{})
             	Panicln(args ...interface{})
             	Print(args ...interface{})
             	Printf(format string, args ...interface{})
             	Println(args ...interface{})
             	Warn(args ...interface{})
             	Warnf(format string, args ...interface{})
             	Warning(args ...interface{})
             	Warningf(format string, args ...interface{})
             	Warningln(args ...interface{})
             	Warnln(args ...interface{})
             }
    
             var defaultLogger *logrus.Logger
    
             func init() {
             	defaultLogger = newLogrusLogger(config.Config())
             }
    
             // NewLogger returns a configured logrus instance
             func NewLogger(cfg config.Provider) *logrus.Logger {
             	return newLogrusLogger(cfg)
             }
    
             func newLogrusLogger(cfg config.Provider) *logrus.Logger {
    
             	l := logrus.New()
    
             	if cfg.GetBool("json_logs") {
             		l.Formatter = new(logrus.JSONFormatter)
             	}
             	l.Out = os.Stderr
    
             	switch cfg.GetString("loglevel") {
             	case "debug":
             		l.Level = logrus.DebugLevel
             	case "warning":
             		l.Level = logrus.WarnLevel
             	case "info":
             		l.Level = logrus.InfoLevel
             	default:
             		l.Level = logrus.DebugLevel
             	}
    
             	return l
             }
    
             // Fields is a map string interface to define fields in the structured log
             type Fields map[string]interface{}
    
             // With allow us to define fields in out structured logs
             func (f Fields) With(k string, v interface{}) Fields {
             	f[k] = v
             	return f
             }
    
             // WithFields allow us to define fields in out structured logs
             func (f Fields) WithFields(f2 Fields) Fields {
             	for k, v := range f2 {
             		f[k] = v
             	}
             	return f
             }
    
             // WithFields allow us to define fields in out structured logs
             func WithFields(fields Fields) Logger {
             	return defaultLogger.WithFields(logrus.Fields(fields))
             }
    
             // Debug package-level convenience method.
             func Debug(args ...interface{}) {
             	defaultLogger.Debug(args...)
             }
    
             // Debugf package-level convenience method.
             func Debugf(format string, args ...interface{}) {
             	defaultLogger.Debugf(format, args...)
             }
    
             // Debugln package-level convenience method.
             func Debugln(args ...interface{}) {
             	defaultLogger.Debugln(args...)
             }
    
             // Error package-level convenience method.
             func Error(args ...interface{}) {
             	defaultLogger.Error(args...)
             }
    
             // Errorf package-level convenience method.
             func Errorf(format string, args ...interface{}) {
             	defaultLogger.Errorf(format, args...)
             }
    
             // Errorln package-level convenience method.
             func Errorln(args ...interface{}) {
             	defaultLogger.Errorln(args...)
             }
    
             // Fatal package-level convenience method.
             func Fatal(args ...interface{}) {
             	defaultLogger.Fatal(args...)
             }
    
             // Fatalf package-level convenience method.
             func Fatalf(format string, args ...interface{}) {
             	defaultLogger.Fatalf(format, args...)
             }
    
             // Fatalln package-level convenience method.
             func Fatalln(args ...interface{}) {
             	defaultLogger.Fatalln(args...)
             }
    
             // Info package-level convenience method.
             func Info(args ...interface{}) {
             	defaultLogger.Info(args...)
             }
    
             // Infof package-level convenience method.
             func Infof(format string, args ...interface{}) {
             	defaultLogger.Infof(format, args...)
             }
    
             // Infoln package-level convenience method.
             func Infoln(args ...interface{}) {
             	defaultLogger.Infoln(args...)
             }
    
             // Panic package-level convenience method.
             func Panic(args ...interface{}) {
             	defaultLogger.Panic(args...)
             }
    
             // Panicf package-level convenience method.
             func Panicf(format string, args ...interface{}) {
             	defaultLogger.Panicf(format, args...)
             }
    
             // Panicln package-level convenience method.
             func Panicln(args ...interface{}) {
             	defaultLogger.Panicln(args...)
             }
    
             // Print package-level convenience method.
             func Print(args ...interface{}) {
             	defaultLogger.Print(args...)
             }
    
             // Printf package-level convenience method.
             func Printf(format string, args ...interface{}) {
             	defaultLogger.Printf(format, args...)
             }
    
             // Println package-level convenience method.
             func Println(args ...interface{}) {
             	defaultLogger.Println(args...)
             }
    
             // Warn package-level convenience method.
             func Warn(args ...interface{}) {
             	defaultLogger.Warn(args...)
             }
    
             // Warnf package-level convenience method.
             func Warnf(format string, args ...interface{}) {
             	defaultLogger.Warnf(format, args...)
             }
    
             // Warning package-level convenience method.
             func Warning(args ...interface{}) {
             	defaultLogger.Warning(args...)
             }
    
             // Warningf package-level convenience method.
             func Warningf(format string, args ...interface{}) {
             	defaultLogger.Warningf(format, args...)
             }
    
             // Warningln package-level convenience method.
             func Warningln(args ...interface{}) {
             	defaultLogger.Warningln(args...)
             }
    
             // Warnln package-level convenience method.
             func Warnln(args ...interface{}) {
             	defaultLogger.Warnln(args...)
             }
    ├─ main.go
          package main
    
          import (
          	"github.com/{{project_name}}/{{project_name}}/cmd"
          )
    
          func main() {
    
          	cmd.Execute()
    
          }
    └─ version/
       └─ version.go
             package version
    
             import (
             	"fmt"
             	"runtime"
             )
    
             // GitCommit returns the git commit that was compiled. This will be filled in by the compiler.
             var GitCommit string
    
             // Version returns the main version number that is being run at the moment.
             const Version = "0.1.0"
    
             // BuildDate returns the date the binary was built
             var BuildDate = ""
    
             // GoVersion returns the version of the go runtime used to compile the binary
             var GoVersion = runtime.Version()
    
             // OsArch returns the os and arch used to build the binary
             var OsArch = fmt.Sprintf("%s %s", runtime.GOOS, runtime.GOARCH)
