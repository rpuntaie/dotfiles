" Vim configuration file.
" Written by Fnux.

set nocompatible

" Paths -----------------------------------------------------------------------

" Scripts' location
" set runtimepath=$XDG_DATA_HOME/vim,$VIM,$VIMRUNTIME

" Swap files
set directory=$XDG_CACHE_HOME/vim/swap

" Command and undo history
set viminfo+=n$XDG_LOG_HOME/vim/viminfo
set undofile
set undodir=$XDG_DATA_HOME/vim/undo

" Make sure the damn paths exists:
function! MakeSureTheDamnPathExists(path)
  if !isdirectory(a:path)
    call mkdir(a:path, 'p', 0700)
  endif
endfunction
call MakeSureTheDamnPathExists($XDG_DATA_HOME.'/vim')
call MakeSureTheDamnPathExists(&directory)
call MakeSureTheDamnPathExists(&undodir)

" NeoBundle -------------------------------------------------------------------

let g:bundledir=$XDG_DATA_HOME.'/vim/neobundle'
let g:bundleinit=0

" Initialise and bootstrap NeoBundle (here goes my thanks to flor):
if has('vim_starting')
  if !isdirectory(g:bundledir)
    let g:bundleinit=1
    call mkdir(g:bundledir, 'p', 0700)
    !git clone 'https://github.com/Shougo/neobundle.vim' $XDG_DATA_HOME/vim/neobundle/neobundle.vim
  endif
  set runtimepath+=$XDG_DATA_HOME/vim/neobundle/neobundle.vim
endif

" List of bundles I use (including NeoBundle itself): "
call neobundle#begin(g:bundledir)
NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'sheerun/vim-polyglot'
NeoBundle 'vim-airline/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'
NeoBundle 'kien/rainbow_parentheses.vim'
NeoBundle 'vim-syntastic/syntastic'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/vimproc.vim'
NeoBundle 'tpope/vim-fugitive'

" Initial run requires NeoBundleInstall, as a simple 'Check' won't suffice:
if g:bundleinit
  NeoBundleInstall
else
  NeoBundleCheck
endif

call neobundle#end()

" Plugins config --------------------------------------------------------------

" Nerdtree
map <C-m> :NERDTreeToggle<CR>

" NeoComplete -> deoplete
let g:neocomplete#enable_at_startup = 1

" Vim-airline : display status bar
set laststatus=2

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" Look ------------------------------------------------------------------------

" 256 colors
set t_Co=256

" Colorscheme
colorscheme jellybeans

" Statusline theme
let g:airline_theme='base16'

" Display and format line numbers.
set number
set numberwidth=4

" Enable UTF-8 (I wanna see Umlauts!).
set encoding=utf8

" Display tabs and trailing whitespaces.
set list
set listchars=tab:→\ ,eol:\ ,trail:·

" Conceallevel
set conceallevel=0

" Without any syntax highlighting, programming is a pain:
syntax on

" Colorcolumn color
highlight ColorColumn ctermbg=255

" Gvim
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar
set guioptions-=b  "remove bottom scroll bar
set guioptions-=e
set guiheadroom=0

" Keybindings -----------------------------------------------------------------

" Leader key
let mapleader="\<Space>"

augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
augroup END

" Save using sudo
cmap w!! w !sudo tee % >/dev/null

" Disable Arrow keys in Escape mode
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Move between splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Balance splits
nnoremap  <silent><leader>w <c-w>=

" Beginning/end of line
nnoremap  <silent><leader>a ^
nnoremap  <silent><leader>e $

" Toggle 'paste' with ,p.
nnoremap <leader>p :set invpaste paste?<CR>

" Neosnippet key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" Neosnippet superTab like snippets behavior.
imap <expr><TAB>
 \ pumvisible() ? "\<C-n>" :
 \ neosnippet#expandable_or_jumpable() ?
 \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" Unite
nmap <leader>b :Unite buffer <CR>
nmap <leader>e :Unite file_rec/async -start-insert <CR>
nmap <leader>E :Unite file_rec/async file_mru -start-insert <CR>
nmap <leader>c :Unite change -start-insert <CR>
nmap <leader>j :Unite jump -auto-preview <CR>
nmap <Leader>t :Unite tag -start-insert <CR>
nmap <Leader>T :Unite tag/include -start-insert <CR>
nmap <Leader>l :Unite line -start-insert -auto-preview <CR>

" Toggle Syntastic
nmap <Leader>s :SyntasticToggle<CR>

" Toggle colorcolumn
function! g:ToggleColorColumn()
  if &colorcolumn != 0
    setlocal colorcolumn=0
  else
    setlocal colorcolumn=80
  endif
endfunction
nnoremap <silent> <leader>h :call g:ToggleColorColumn()<CR>

" Ctrl+c/Ctrl+v to copy/paste (clipboard) in gvim
nmap <C-V> "+gP
imap <C-V> <ESC><C-V>i
vmap <C-C> "+y

" Misc ------------------------------------------------------------------------

filetype plugin indent on

" Mouse support ("all")
set mouse=a

" Show command and mode.
set showcmd

" Make backspace work like most other apps.
set backspace=2

" Auto indentation.
set autoindent
set copyindent

" Folding
set foldmethod=indent

" Use spaces instead of tabs.
set expandtab
set tabstop=2
set shiftwidth=2

" Disable spelling.
set nospell

" More natural splits
set splitbelow
set splitright

" Fix unrecognised file types:
au BufRead,BufNewFile *.html.ecr setl filetype=html
