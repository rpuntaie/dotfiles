snippet pymain "python main not imported"
if __name__ == "__main__":
  main()
endsnippet

snippet shmain "bash main not sourced"
if [[ "${BASH_SOURCE[0]}" == "\${0}" ]]; then
${1}
fi
endsnippet

snippet gosignal "handle signal in go"
go func() {
  ${1}
}
ch := make(chan os.Signal, 1)
signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM)
<-ch
endsnippet

snippet gotestcompile "compile with debug info"
go test -c -gcflags '-N -l'
endsnippet

snippet ledgbal "ledger balance"
ledger -f ${1} balance
endsnippet
snippet ledgreg "ledger register"
ledger -f ${1} register ${2}
endsnippet
snippet ledger "ledger price db"
ledger --price-db ${1} -V balance ${2}
endsnippet
snippet ledger "ledger time period"
ledger --begin 2008.01.01 --end 2008.01.14 bal ${1}
endsnippet

snippet ffpiece "take a piece out of a video/audio"
ffmpeg -i ${1} -ss ${2} -t ${3} -c copy -y ${4}
endsnippet


snippet gotest "go testing code"
import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestSomething(t *testing.T) {
	t.Run("subtest", func(t *testing.T) {
		assert.Equal(t, 123, 123, "they should be equal")
		assert.NotEqual(t, 123, 456, "they should not be equal")
		var object *testing.T = nil
		if assert.NotNil(t, object) {
			require.Equal(t, "Something", object.TempDir())
		}
	})
}
endsnippet

snippet dir "directory of bash script"
DIR="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
endsnippet

snippet smartcontractinteraction "interact with smart contract"
async function main() {
	const contractAddress = "0xC47Fd6ec9bb45115e89E76aC914F6EEe19501c15";
	const myContract = await hre.ethers.getContractAt("NameOfContract", contractAddress);
	const mintToken = await myContract.mint(1, { value: ethers.utils.parseEther("0.3") });
	console.log("Trx hash:", mintToken.hash);
}
main()
	.then(() => process.exit(0))
	.catch((error) => {
		console.error(error);
		process.exit(1);
});
endsnippet
