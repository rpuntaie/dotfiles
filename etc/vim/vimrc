""
" build with python 3.x:
" ./configure --enable-pythoninterp --enable-python3interp --enable-cscope \
" --enable-gui=gtk2 --with-features=big --enable-netbeans --with-tlib=ncurses
"
" pacman --noconfirm -S \
" vim-spell-en vim-spell-de vim-spell-it vim-spell-fr vim-spell-ru vim-spell-es
"
" system:
"   https://github.com/rpuntaie/rollarch
"   https://github.com/rpuntaie/dotfiles
"   - python with vim_py3_rst
"   - cscope
"   - wordnet
"   - rst2jira
"   - waf
"
" "coc
" cd ~/.local/var/lib/vim/dein/repos/github.com/neoclide/coc.nvim
" git clean -xfd
" yarn install --frozen-lockfile
"
" <ESC> mapped to <CAPSLOCK> in the OS
"
" doc/myvimrc.txt.stpl uses """, "": and ""| lines
"
""minimal copy
"nnoremap Y y$
"let mapleader = ","
"map <silent> s <nop>
"map <silent> S <nop>
"nnoremap <leader>s :update<CR>
"nnoremap <silent> <leader>v :vert botright term<CR><C-W><C-W>
"nnoremap <leader>m yy<C-W><C-W><C-W>""<C-W><C-P>j
"
""working versions
"example: call dein#add('tpope/vim-fugitive',{'if':l:nn,'merged':0, 'rev':'0840f00'})
"cd ~/.local/var/lib/vim/dein/repos/github.com
"( cd andymass/vim-matchup && ghash)               4bbb22d 694e1ca1132a9bbee4f491b48041e1710
"( cd bogado/file-line && ghash )                  559088a faf10124ea663ee0f4f73b1de48fb1632
"( cd cdelledonne/vim-cmake && ghash )             844b856 77d52d932432eb115236d9173ebe3664d
"( cd Chiel92/vim-autoformat && ghash )            80ba8b1 3a9699db20754623a0933095be65fc203
"( cd chikamichi/mediawiki.vim && ghash )          26e5737 264354be41cb11d16d48132779795e168
"( cd chrisbra/unicode.vim && ghash )              664d7b2 e5cedf36ea3a85ad7e8e28e43c16f025b
"( cd davidhalter/jedi && ghash )                  4165250 7b3de645a8a4329299e8e40bff68c8da7
"( cd echuraev/translate-shell.vim && ghash )      d72a2ea bd2a5466369df794777e662ecc2d732e9
"( cd gfanto/fzf-lsp.nvim && ghash )               6683718 524adec3ce58c848706bcc7f3aa6a09a1
"( cd godlygeek/tabular && ghash )                 339091a c4dd1f17e225fe7d57b48aff55f99b23a
"( cd goerz/jupytext.vim && ghash )                a1433a1 1035169960a0342c1f792974765c5cfd8
"( cd sankhesh/gitv && ghash )                     d042e02 19c026f8b12bc2af209cc807c0145e13f
"( cd honza/vim-snippets && ghash )                ef4f418 e5326b2069ab767e4139b7bd3dfa5e0f0
"( cd idanarye/vim-vebugger && ghash )             15ab930 a6cfbcf8660ded98c3afd289bed7804b0
"( cd jalvesaq/Nvim-R && ghash )                   7289593 6c12e0c7f5c229916b07e63f16de72233
"( cd jlanzarotta/bufexplorer && ghash )           99557c4 51ff6ed3bbb9b9f6215ad57e919740635
"( cd johnsyweb/vim-makeshift && ghash )           c088678 c52821dceb763bcdbdb3a229d3d78aab6
"( cd junegunn/fzf && ghash )                      3f90fb4 2d8871920138ace9878502f22a4d91e85
"( cd junegunn/fzf.vim && ghash )                  980cd07 4395110964b66bfbc5c1f1ee237be3c86
"( cd lervag/vimtex && ghash )                     5d1335d 095d11f48a6744f75222449fc71eba596
"( cd liuchengxu/vista.vim && ghash )              cb908f2 1c23d9c9ebce678c8dbc7a0f876384b8c
"( cd Lokaltog/vim-easymotion && ghash )           d75d959 1e415652b25d9e0a3669355550325263d
"( cd machakann/vim-sandwich && ghash )            785fb39 d79bb843b545f1d8a9265bd8f2e2285f8
"( cd mattn/vim-lsp-settings && ghash )            609c40d 4947c762bbe9009b8bcd89e2c83be1dad
"( cd mattn/webapi-vim && ghash )                  b09cbd3 a27157a5baf0468403b392f577adefe45
"( cd metakirby5/codi.vim && ghash )               cf62681 a4962ce1873e4b2a5e0bf401dcd42890f
"( cd nathanaelkane/vim-indent-guides && ghash )   54d889a 63716ee2f1818aa2ec5082db47147147b
"( cd neoclide/coc.nvim && ghash )                 03c9add 7cd867a013102dcb45fb4e75304d227d7
"( cd neovimhaskell/haskell-vim && ghash )         f35d022 04b4813d1dbe8b0e98cc39701a4b8e15e
"( cd ojroques/vim-oscyank && ghash )              5d152a9 e03ca1c975c1f439456376e01561a02b5
"( cd prabirshrestha/vim-lsp && ghash )            fb0a723 06e1fc42c1ce8909aa1e420ddfccf6fbf
"( cd puremourning/vimspector && ghash )           14f34ea 6d12b71a720356ce83c386f8ba393e700
"( cd roxma/nvim-yarp && ghash )                   b710bf4 daccb603a423754794fb446e5fbb59576
"( cd roxma/vim-hug-neovim-rpc && ghash )          93ae387 92bc197c3bdffa2716ae493c67a5e7957
"( cd rpuntaie/vim-barbaric && ghash )             68b8fb2 df159fd148cd3a5e820fb495aa5e0a5ae
"( cd rpuntaie/vim_py3_rst && ghash )              06e01ef fc09a100a4b5f82b39d36844919bbfafa
"( cd Rykka/mathematic.vim && ghash )              e57ec0d 767fee83f95994b1a8d5cc82395198a49
"( cd scrooloose/nerdcommenter && ghash )          a65465d 321f2f8a74b2ffa540b9b87563f7e12e8
"( cd scrooloose/nerdtree && ghash )               0e71462 f90fb4bd09121eeba829512cc24ab5c97
"( cd sheerun/vim-polyglot && ghash )              4f53883 50be1052f610b830c8fce8fbc17370ec6
"( cd Shougo/dein.vim && ghash )                   1b05b95 9f348ef610d3649cfde17412c0998f700
"( cd Shougo/neoinclude.vim && ghash )             954cfc9 dfdb303f2c2fa867b9cf949dd74512628
"( cd Shougo/vimproc.vim && ghash )                8f40d86 ab938d5df8c1c9824320621ae9f0d5609
"( cd SirVer/ultisnips && ghash )                  53e1921 e3ef015ef658e540c0aa9c4835f9c18a6
"( cd stefandtw/quickfix-reflector.vim && ghash )  8e9c05a 110b80ab66fc8bc3d5fe9e6fa168aada6
"( cd thaerkh/vim-indentguides && ghash )          3152f3a 0604089d545983b72e7cb676898bb7da1
"( cd tomtom/tlib_vim && ghash )                   70c4e22 2464020edc2809c932b488daaf891eeef
"( cd tpope/vim-fugitive && ghash )                0840f00 1feadf967898deadf977d4e7b2f35eaf4
"( cd tpope/vim-sleuth && ghash )                  38bd401 0110614822cde523ebc5724963312ab63
"( cd tyru/open-browser.vim && ghash )             d6f1784 685abdd86500fdb5fa2fbaf2aab833f18
"( cd vim-scripts/vcscommand.vim && ghash )        2fb3268 1361f37533455d20aaa7fc6eb11b0fa4b
"( cd w0rp/ale && ghash )                          35d0bd1 5194b95f0dc8483ee6e727fcf3d4c8b26

""| Links to plugin mappings::

set encoding=utf-8
scriptencoding utf-8 " else listchars problem on Windows

set nocompatible

let mapleader = ","
let maplocalleader = '\'
noremap ` ,

if has('win32')
  let g:localvimfiles=$HOME.'/vimfiles'
  let $MYVIMRC=g:localvimfiles.'/vimrc'
elseif has('mac')
  let g:localvimfiles=$HOME.'/.vim'
  let $MYVIMRC=g:localvimfiles.'/vimrc'
else
  " to use vimrc in unconfigured system:
  " VIMINIT="so dotfiles/etc/vim/vimrc" vim
  if empty($XDG_CONFIG_HOME)
    let $XDG_CONFIG_HOME=expand('~').'/mine/dotfiles/etc'
  endif
  if empty($XDG_STATE_HOME)
    let $XDG_STATE_HOME=expand('~').'/.cache/vim'
  endif
  let $MYVIMRC=$XDG_CONFIG_HOME.'/vim/vimrc'
  let g:localvimfiles=$XDG_STATE_HOME.'/vim'
endif
if has('mac')
  let g:bundledir=$HOME.'/.cache/dein'
  let g:localvimfiles=$HOME.'/.vim'
else
  let g:bundledir=g:localvimfiles.'/dein'
endif
set undofile
let &undodir=g:localvimfiles.'/undo'
if has("nvim")
  let &undodir=g:localvimfiles.'/undo_nvim'
endif
if !has('win32')
  " XDG Environment
  " https://tlvince.com/vim-respect-xdg
  set directory=$XDG_STATE_HOME/vim,~/,/tmp
  set backupdir=$XDG_STATE_HOME/vim,~/,/tmp
  if !has('nvim')
    " also history
    set viminfofile=$XDG_STATE_HOME/vim/viminfo
  endif
  set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM/vimfiles,$VIMRUNTIME
endif

let g:CompleteJediViaCoc=1
if has("nvim")
let g:CompleteJediViaCoc=1
endif

function! s:Deinplugins()
  let l:nn = !has("nvim") || has("nvim")
  let l:nv = has("nvim")
  call dein#add('bogado/file-line',{'if':l:nn,'merged':0}) " open <file>:<line>
  call dein#add('chikamichi/mediawiki.vim',{'if':l:nn,'merged':0}) " syntax .mw .wiki .mediawiki
""| |plugin/02tlib.vim|  TScratch TBrowseOutput
  call dein#add('tomtom/tlib_vim',{'merged':0})
""| |quickfix-reflector| enable editing the quickfix to change more files
  call dein#add('stefandtw/quickfix-reflector.vim',{'if':l:nn,'merged':0})
""| |fzf-vim-commands| :Snippets :Helptags :Marks |myvmimaps|
  call dein#add('junegunn/fzf', { 'build': './install --all', 'merged': 0 })
  call dein#add('junegunn/fzf.vim', { 'depends': 'fzf','merged':0 })
""| |bufexplorer| still needed to delete/copy
  call dein#add('jlanzarotta/bufexplorer',{'merged':0})
""| |sleuth| detect tab settings heuristically, :Sleuth
  call dein#add('tpope/vim-sleuth',{'if':l:nn,'merged':0})
""| |:Tabularize| format (,aa)
  call dein#add('godlygeek/tabular',{'if':l:nn,'merged':0})
""| |sandwich-keymappings| s{adr} dasX da<wait>s
"   https://github.com/machakann/vim-sandwich/issues/62
  call dein#add('machakann/vim-sandwich',{'if':l:nn,'merged':0})
""| |easymotion-default-mappings| ,,{fFtTwWbB(g)eEjknN}
  call dein#add('Lokaltog/vim-easymotion',{'if':l:nn,'merged':0}) " <leader><leader>f
""| |matchup-default-mappings|  % {gv[]zai(ds)(cs}%
  call dein#add('andymass/vim-matchup',{'if':l:nn,'merged':0,'rev':'4bbb22d'})
"   indentation guides
  "call dein#add('nathanaelkane/vim-indent-guides',{'merged':0})
  "call dein#add('thaerkh/vim-indentguides',{'if':l:nn,'merged':0})
  call dein#add('neoclide/coc.nvim', {'if':g:CompleteJediViaCoc,'merged':0, 'build': 'yarn install --frozen-lockfile'})
  call dein#add('davidhalter/jedi',{'if':g:CompleteJediViaCoc,'merged':0}) " also do: pip install jedi
  "snippets
""| |UltiSnips| snippets
  call dein#add('SirVer/ultisnips',{'if':l:nn,'merged':0})
  call dein#add('honza/vim-snippets',{'if':l:nn,'merged':0})
  "languages
  call dein#add('sheerun/vim-polyglot',{'merged':0})
  call dein#add('neovimhaskell/haskell-vim',{'if':l:nn,'merged':0})
  call dein#add('Chiel92/vim-autoformat',{'if':l:nn,'merged':0}) " :Autoformat
  call dein#add('metakirby5/codi.vim',{'if':l:nn,'merged':0}) " :Codi :Codi!
""| |AleToggle| linting (:ALEToggle)
  call dein#add('w0rp/ale',{'if':l:nn,'merged':0})
    "python
""| |vim_py3_rst| python and rst helpers
  call dein#add('rpuntaie/vim_py3_rst',{'if':l:nn,'merged':0})
  call dein#add('python-mode/python-mode',{'merged':0})
"  ""| |Nvim-R-use| \rf \rq \d ... in R file
"    call dein#add('jalvesaq/Nvim-R',{'if':l:nn,'merged':0})
""| |vimproc-commands| asynchronous execution
  call dein#add('Shougo/vimproc.vim', {'if':l:nn,'build': 'make','merged':0})
""| |asyncrun| asynchronous execution of shell commands
  call dein#add('skywind3000/asyncrun.vim', {'if':l:nn,'merged':0})
""| |vebugger-gdb| :VBGstartGDB, ` for leader
  call dein#add('idanarye/vim-vebugger',{'if':l:nn,'merged':0})
""| |Vimspector| <leader><F5> (needs .vimspector.json) or :Gdb, :Pdb, Dlv
  call dein#add('puremourning/vimspector',{'if':l:nn,'merged':0})
"
" ""| |vim-dap| needs tmux (DebugRun DebugRunLast Break ClearBreakpoints ListBreakpoints Continue Restart Step StepIn StepOut)
"   call dein#add('dradtke/vim-dap',{'if':l:nn,'merged':0})
"   call dein#add('mfussenegger/nvim-dap',{'if':l:nv,'merged':0})
" ""| |vim-delve| :DlvDebug :DlvTest :DlvExec
"   call dein#add('sebdah/vim-delve',{'if':l:nn,'merged':0})
"
""| |vimtex-default-mappings| for latex
  call dein#add('lervag/vimtex',{'if':l:nn,'merged':0})
""| |makeshift| [:MM] builds the current project
  call dein#add('johnsyweb/vim-makeshift',{'if':l:nn,'merged':0}) " Build
""| |cmake| :CMake[Generate,Build,Install] c[gbi]
  call dein#add('cdelledonne/vim-cmake',{'if':l:nn,'merged':0}) " Build
""| |NERDTreeMappings| [sn] file browser
  call dein#add('scrooloose/nerdtree',{'if':l:nn,'merged':0})
  call dein#add('tyru/open-browser.vim',{'if':l:nn,'merged':0})
    "commenting
""| |NERDCommenterFunctionality| ,c{ cnmisy$Aalbu}
  call dein#add('scrooloose/nerdcommenter',{'if':l:nn,'merged':0})
    "git tools
""| |fugitive-commands| :Gxxx like :Gdiffsplit
  call dein#add('tpope/vim-fugitive',{'if':l:nn,'merged':0})
""| |gitv-usage| :Gitv[!]
  call dein#add('sankhesh/gitv',{'if':l:nn,'merged':0}) " needs fugitive
  call dein#add('rbong/vim-flog',{'if':l:nn,'merged':0}) " needs fugitive
  call dein#add('junegunn/gv.vim',{'if':l:nn,'merged':0}) " needs fugitive
    "other vcs
""| |vcscommand-mappings| works not only for git (<leader>z)
  call dein#add('vim-scripts/vcscommand.vim',{'if':l:nn,'merged':0})
    "dictionary
  call dein#add('mattn/webapi-vim',{'if':l:nn,'merged':0})
""| |trans-usage| ,tt
  call dein#add('echuraev/translate-shell.vim',{'if':l:nn,'merged':0})
""| mathematic.vim (<leader>lm)
  call dein#add('Rykka/mathematic.vim',{'if':l:nn,'merged':0})
""| |unicode-plugin| :UnicodeTable i: <C-X><C-G>
  call dein#add('chrisbra/unicode.vim',{'if':l:nn,'merged':0})
""| |barbaric-functions| (ibus) input method only in insert mode
  call dein#add('rpuntaie/vim-barbaric',{'if':l:nn,'merged':0})
  call dein#add('goerz/jupytext.vim',{'if':l:nn,'merged':0})
  call dein#add('ojroques/vim-oscyank',{'if':l:nn,'merged':0})
  call dein#add('fatih/vim-go',{'if':l:nn,'merged':0})
  call dein#add('vyperlang/vim-vyper',{'if':l:nn,'merged':0})
  call dein#add('inkarkat/vim-ingo-library',{'if':l:nn,'merged':0})
  call dein#add('inkarkat/vim-ExtractMatches',{'if':l:nn,'merged':0})
  call dein#add('dart-lang/dart-vim-plugin',{'if':l:nn,'merged':0})
  call dein#add('google/vim-maktaba',{'if':l:nn,'merged':0})
  call dein#add('google/vim-codefmt',{'if':l:nn,'merged':0})
  call dein#add('sk1418/HowMuch',{'if':l:nn,'merged':0})
  call dein#add('hylang/vim-hy',{'if':l:nn,'merged':0})
  call dein#add('jessekelighine/vindent.vim',{'if':l:nn,'merged':0})
  call dein#add('thesis/vim-solidity',{'if':l:nn,'merged':0})
  call dein#add('kaarmu/typst.vim',{'if':l:nn,'merged':0})
  call dein#add('liuchengxu/vista.vim',{'if':l:nn,'merged':0})
"call dein#add('liuchengxu/vim-clap',{'if':l:nn,'merged':0}) " vim-clap still beta support treesitter in vim
"call dein#add('kana/vim-textobj-user',{'if':l:nn,'merged':0})
"call dein#add('tpope/vim-unimpaired',{'if':l:nn,'merged':0})
"call dein#add('lifepillar/vim-colortemplate',{'if':l:nn,'merged':0})
"call dein#add('kovisoft/slimv',{'merged':0})
"call dein#add('airblade/vim-gitgutter',{'if':l:nn,'merged':0})
"call dein#add('editorconfig/editorconfig-vim',{'if':l:nn,'merged':0})
"call dein#add('itchyny/lightline.vim',{'if':l:nn,'merged':0})
"call dein#add('mattn/emmet-vim',{'if':l:nn,'merged':0})
"call dein#add('terryma/vim-multiple-cursors',{'if':l:nn,'merged':0})
"call dein#add('tpope/vim-eunuch',{'if':l:nn,'merged':0})
"call dein#add('severin-lemaignan/vim-minimap',{'if':l:nn,'merged':0})
"call dein#add('jackguo380/vim-lsp-cxx-highlight',{'if':l:nn,'merged':0})
"call dein#add('rafi/awesome-vim-colorschemes')
call dein#add('nvim-treesitter/nvim-treesitter',{'if':l:nv,'merged':0,'do': ':TSUpdate'})
call dein#add('nvim-treesitter/nvim-treesitter-textobjects',{'if':l:nv,'merged':0})
call dein#add('akinsho/toggleterm.nvim',{'if':l:nv,'merged':0})
"call dein#add('ChristianChiarulli/nvcode-color-schemes.vim',{'if':l:nv,'merged':0}) " nvcode onedark nord aurora gruvbox palenight snazzy xoria
"call dein#add('ray-x/aurora')
"call dein#add('dracula/vim')
"call dein#add('sainnhe/sonokai')
"call dein#add('0xStabby/chatgpt-vim',{'if':l:nn,'merged':0})
endfunction

let g:bundleinit=0
if empty($NO_DEIN_INSTALL) && has('vim_starting') && executable('git')
    if isdirectory(g:bundledir.'/repos')
        let g:bundleinit=1
    endif
    let g:dein_url='https://github.com/Shougo/dein.vim'
    let g:dein_path=g:bundledir.'/repos/github.com/Shougo/dein.vim'
    if g:bundleinit==0
        let g:bundleinit=2
        call mkdir(g:bundledir, 'p', 0700)
        execute '!git clone '.g:dein_url.' '.g:dein_path
    endif
    let &runtimepath=&runtimepath.','.g:dein_path
    if dein#load_state(g:bundledir)
        call dein#begin(g:bundledir)
        call dein#add(g:dein_path)

        call <SID>Deinplugins()

        call dein#end()
        call dein#save_state()
    endif
    if g:bundleinit==2
        call dein#install()
    endif
endif
"call dein#check_clean()
"call dein#update()
"call dein#recache_runtimepath()

if has('nvim')
lua << EOF
require("nvim-treesitter.configs").setup({
    ensure_installed = {
    "ada",
    "agda",
    "arduino",
    "asm",
    "astro",
    "bash",
    "beancount",
    "bibtex",
    "bicep",
    "bitbake",
    "c",
    "cairo",
    "capnp",
    "chatito",
    "clojure",
    "cmake",
    "comment",
    "commonlisp",
    "cpon",
    "cpp",
    "css",
    "csv",
    "cuda",
    "d",
    "dart",
    "dockerfile",
    "doxygen",
    "dtd",
    "elixir",
    "elm",
    "erlang",
    "fennel",
    "firrtl",
    "fish",
    "fortran",
    "func",
    "gdscript",
    "gitattributes",
    "gitcommit",
    "gitignore",
    "gleam",
    "glsl",
    "gn",
    "go",
    "gomod",
    "gosum",
    "groovy",
    "gstlaunch",
    "hack",
    "hare",
    "haskell",
    "hcl",
    "heex",
    "hlsl",
    "html",
    "hyprlang",
    "ispc",
    "java",
    "javascript",
    "jsdoc",
    "json",
    "jsonnet",
    "julia",
    "kconfig",
    "kdl",
    "kotlin",
    "latex",
    "linkerscript",
    "llvm",
    "lua",
    "luadoc",
    "luap",
    "luau",
    "make",
    "markdown",
    "markdown_inline",
    "matlab",
    "mermaid",
    "meson",
    "ninja",
    "nix",
    "nqc",
    "objc",
    "ocaml",
    "ocaml_interface",
    "odin",
    "pascal",
    "pem",
    "perl",
    "php",
    "po",
    "pony",
    "powershell",
    "printf",
    "prisma",
    "properties",
    "proto",
    "psv",
    "puppet",
    "purescript",
    "pymanifest",
    "python",
    "qmldir",
    "qmljs",
    "query",
    "r",
    "racket",
    "re2c",
    "readline",
    "requirements",
    "ron",
    "rst",
    "ruby",
    "rust",
    "scala",
    "scheme",
    "scss",
    "smali",
    "smithy",
    "solidity",
    "sparql",
    "swift",
    "sql",
    "squirrel",
    "starlark",
    "svelte",
    "tablegen",
    "tcl",
    "terraform",
    "thrift",
    "toml",
    "tsv",
    "tsx",
    "twig",
    "typescript",
    "typst",
    "udev",
    "ungrammar",
    "uxntal",
    "v",
    "verilog",
    "vhdl",
    "vim",
    "vue",
    "wgsl",
    "xcompose",
    "xml",
    "yaml",
    "yuck",
    "zig",
    "vimdoc",
    "tmux",
    },
    auto_install = true,
    highlight = { enable = true },
    indent = { enable = true },
    incremental_selection = {
        enable = true,
        keymaps = {
            init_selection = "<C-space>",
            node_incremental = "<C-space>",
            scope_incremental = false,
            node_decremental = "<bs>",
        },
    },
})
EOF
endif

let g:Gitv_OpenHorizontal = 0

py3 << EOF
import os
try:
  activate_this = os.path.expanduser('~/.virtualenvs/pyv/bin/activate_this.py')
  exec(open(activate_this).read(), { "__file__": activate_this })
except: pass
EOF

let g:powerline_pycmd = "py3"
"SirVer/ultisnips
let g:UltiSnipsExpandTrigger = '<tab>'
"let g:UltiSnipsListSnippets = '<c-tab>'
inoremap <silent> <c-tab> <C-\><C-O>:Snippets<CR>
"#https://github.com/junegunn/fzf.vim/issues/796
"function! s:inject_snippet(line)
"  let ve = &ve
"  set ve=onemore
"  let del = empty(matchstr(getline('.'), '\%' . (col('.') - 1) . 'c\S')) ? "" : "\<c-w>"
"  let snip = split(a:line, "\t")[0]
"  execute 'normal! i'.del.s:strip(snip)
"  execute 'normal! l'
"  call UltiSnips#CursorMoved()  " sync UltiSnips state after inserting text
"  call UltiSnips#ExpandSnippet()
"  let &ve = ve
"endfunction
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
"sheerun/vim-polyglot
"https://github.com/sheerun/vim-polyglot/issues/204
let g:rst_syntax_code_list = {
    \ 'vim': ['vim'],
    \ 'java': ['java'],
    \ 'cpp': ['cpp', 'c++'],
    \ 'lisp': ['lisp'],
    \ 'php': ['php'],
    \ 'python': ['python'],
    \ 'perl': ['perl'],
    \ 'sh': ['sh'],
    \ 'javascript': ['javascript'],
    \ 'go': ['go'],
    \ 'rust': ['rust'],
    \ 'kotlin': ['kotlin'],
    \ 'html': ['html'],
    \ 'swift': ['swift'],
    \ 'dart': ['dart'],
    \ 'cs': ['cs'],
    \ 'lua': ['lua'],
    \ }
let g:polyglot_disabled = ['latex']
"w0rp/ale
let g:ale_enabled=0 " :ALEToggle
"python-mode/python-mode
let g:pymode_lint = 0
let g:pymode_folding = 0
let g:pymode_lint_write = 0
"lervag/vimtex
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
let g:tex_conceal='abdmg'
"cdelledonne/vim-cmake
function! s:CBDL()
let g:cmake_build_dir_location='../'.fnamemodify(trim(fnamemodify(cmake#GetInfo().project_dir,':p'),'/',2),':t').'_build'
endfunction
nmap SBG :call <SID>CBDL()<CR><Plug>(CMakeGenerate)
nmap SBB :call <SID>CBDL()<CR><Plug>(CMakeBuild)
"johnsyweb/vim-makeshift
let g:makeshift_on_startup = 0
let g:makeshift_on_bufread = 0
let g:makeshift_on_bufnewfile = 0
let g:makeshift_on_bufenter = 0
let g:makeshift_systems = {
    \'CMakeList.txt': 'cmake',
    \'meson.build': 'meson',
    \'build.sbt ': 'sbt',
    \'dodo.py ': 'doit',
    \'boost-build.jam ': 'b2',
    \}
"scrooloose/nerdtree
let g:NERDTreeNodeDelimiter = "\u00a0"
let g:NERDTreeShowHidden=1
let g:netrw_shq="'"
let g:netrw_browsex_viewer= "xdg-open"
let g:netrw_nogx=1 " disable netrw's gx mapping.
let g:netrw_altv = 1
let g:netrw_preview = 1
let g:netrw_list_hide = "^\\..*"
let g:netrw_home = $XDG_STATE_HOME.'/vim'
let g:VCSCommandMapPrefix = "<leader>z"
"echuraev/translate-shell.vim
"Rykka/mathematic.vim
let g:mathematic_user_dir = g:bundledir.
  \ '/repos/github.com/Rykka/mathematic.vim/keymap/mathematic.vim'
"idanarye/vim-vebugger
let g:vebugger_leader='`'
let g:vebugger_view_source_cmd='edit'
"rpuntaie/vim-barbaric
let g:barbaric_default = 'xkb:us::eng'
"scrooloose/nerdcommenter
let g:NERDSpaceDelims=1

if match(&runtimepath,'coc') == -1
  let g:CompleteJediViaCoc=0
endif

if g:CompleteJediViaCoc
    "coc.nvim
    let g:coc_global_extensions = [
          \ 'coc-dictionary',
          \ 'coc-tag',
          \ 'coc-word',
          \ 'coc-emoji',
          \ 'coc-omni',
          \ 'coc-syntax',
          \ 'coc-ultisnips',
          \ 'coc-jedi',
          \ 'coc-clangd',
          \ 'coc-cmake',
          \ 'coc-json',
          \ 'coc-java',
          \ 'coc-tsserver',
          \ 'coc-sh',
          \ 'coc-html',
          \ 'coc-css',
          \ 'coc-svg',
          \ 'coc-vimlsp',
          \ 'coc-sourcekit',
          \ 'coc-kotlin',
          \ 'coc-solidity',
          \ 'coc-flutter-tools',
          \ 'coc-go',
          \ 'coc-lua',
          \ 'coc-protobuf',
          \ 'coc-rust-analyzer',
          "\ 'coc-esbonio',
          "\ 'coc-godot',
          "\ 'coc-yaml',
          "\ 'coc-highlight',
          "\ 'coc-angular',
          \ ]
    call coc#config('languageserver', {
          \ 'sourcekit': {
          \    "commandPath": "/usr/lib/swift/bin/sourcekit-lsp",
          \    "command": "/usr/lib/swift/bin/sourcekit-lsp",
          \    "rootPatterns": [
          \      "Package.swift"
          \    ],
          \    "filetypes": [
          \      "swift",
          \    ],
          \    "sourcekit.env": {
          \       "SOURCEKIT_TOOLCHAIN_PATH": "/usr/lib/swift/",
          \       "SOURCEKIT_LOGGING": "3"
          \    }
          \ },
          \ "go": {
          \     "rootPatterns": [ "go", "gomod" ],
          \     "disabledFeatures": [ "workspaceFolders" ],
          \     "initializationOptions": { "completeUnimported": v:true }
          \ },
          \ "kotlin": {
          \     "command": "/usr/bin/kotlin-language-server",
          \     "filetypes": ["kotlin"]
          \ },
          \ 'haskell': {
          \    "command": "haskell-language-server-wrapper",
          \    "args": ["--lsp"],
          \    "rootPatterns": [
          \      "*.cabal",
          \      "stack.yaml",
          \      "cabal.project",
          \      "package.yaml",
          \      "hie.yaml"
          \    ],
          \    "filetypes": [
          \      "hs",
          \      "lhs",
          \      "haskell",
          \      "lhaskell"
          \    ],
          \    "initializationOptions": {
          \      "languageServerHaskell": {
          \      }
          \    }
          \  }
          \ })
endif

"": `:Sw` sudo write
command! -nargs=0 Sw w !sudo tee % > /dev/null

""" `Sf,SF`: flutter
nmap <silent> <Leader>Sfpg :CocCommand flutter.pub.get<CR>
nmap <silent> <Leader>Sfd :CocCommand flutter.devices<CR>
nmap <silent> <Leader>Sfa :CocCommand flutter.run<CR>
nmap <silent> <Leader>Sfq :CocCommand flutter.dev.quit<CR>
nmap <silent> <Leader>Sfl :CocCommand flutter.dev.openDevLog<CR>
nmap <silent> <Leader>Sfcl :CocCommand flutter.dev.clearDevLog<CR>
nmap <silent> <Leader>Sfr :CocCommand flutter.dev.hotReload<CR>
nmap <silent> <Leader>SfR :CocCommand flutter.dev.hotRestart<CR>
nmap <silent> <Leader>Sft :CocCommand flutter.dev.openDevToolsProfiler<CR>
nmap <silent> <Leader>Sfp :CocCommand flutter.dev.openProfiler<CR>
nmap <silent> <Leader>Sfpo :CocCommand flutter.dev.showPerformanceOverlay<CR>
nmap <silent> <Leader>Sfio :CocCommand flutter.dev.showWidgetInspectorOverride<CR>
nmap <silent> <Leader>Sfs :CocCommand flutter.dev.screenshot<CR>
nmap <silent> <Leader>Sflr :CocCommand flutter.lsp.restart<CR>
nmap <silent> <Leader>Sfcf :CocCommand workspace.renameCurrentFile<CR>
" =
nmap <silent> <Leader>SFpg :CocCommand flutter.pub.get<CR>
nmap <silent> <Leader>SFd :CocCommand flutter.devices<CR>
nmap <silent> <Leader>SFa :CocCommand flutter.run<CR>
nmap <silent> <Leader>SFq :CocCommand flutter.dev.quit<CR>
nmap <silent> <Leader>SFl :CocCommand flutter.dev.openDevLog<CR>
nmap <silent> <Leader>SFcl :CocCommand flutter.dev.clearDevLog<CR>
nmap <silent> <Leader>SFr :CocCommand flutter.dev.hotReload<CR>
nmap <silent> <Leader>SFR :CocCommand flutter.dev.hotRestart<CR>
nmap <silent> <Leader>SFt :CocCommand flutter.dev.openDevToolsProfiler<CR>
nmap <silent> <Leader>SFp :CocCommand flutter.dev.openProfiler<CR>
nmap <silent> <Leader>SFpo :CocCommand flutter.dev.showPerformanceOverlay<CR>
nmap <silent> <Leader>SFio :CocCommand flutter.dev.showWidgetInspectorOverride<CR>
nmap <silent> <Leader>SFs :CocCommand flutter.dev.screenshot<CR>
nmap <silent> <Leader>SFlr :CocCommand flutter.lsp.restart<CR>
nmap <silent> <Leader>SFcf :CocCommand workspace.renameCurrentFile<CR>

":Termdebug <app>
"packadd termdebug
"...already loaded
" go to <file>:<line> found further up in debugger terminal window
nmap so ?:\d<CR>BvEy<C-W><C-W>:e <C-R>"<CR><C-W><C-W>i
"vimspector debugger
"in bash:
"cd $XDG_STATE_HOME/vim/dein/repos/github.com/puremourning/vimspector
"./install_gadget.py --basedir $XDG_STATE_HOME/vim/vimspector --all --force-all
let g:vimspector_base_dir=expand('$XDG_STATE_HOME/vim/vimspector')
let g:vimspector_enable_mappings = 'HUMAN'
"~/msrc/vimspector/doc/vimspector.txt
nnoremap SV :VimspectorReset<CR>
command! SV :VimspectorReset
" these json entries come from vscode-cpptools or vscode-go and can be slightly different, e.g. stopAtEntry vs stopOnEntry
"": `:Gdb` create .vimspector.json and run vimspector
command! -nargs=+ -complete=command Gdb silent call vimspector#LaunchWithConfigurations({
\   "run": {
\     "adapter": "vscode-cpptools",
\     "configuration": {
\       "request": "launch",
\       "program": "${workspaceRoot}/".<f-args>,
\       "args": [],
\       "cwd": "${workspaceRoot}",
\       "mode": "debug",
\       "stopAtEntry": v:true,
\       'console': 'integratedTerminal',
\       "MIMode": "gdb",
\       "setupCommands": [
\             {
\               "description": "Enable pretty-printing for gdb",
\               "text": "-enable-pretty-printing",
\               "ignoreFailures": v:true
\             }
\           ]
\ },
\     "breakpoints": {
\       "exception": {
\         "all": "",
\         "caught": "",
\         "uncaught": "Y"
\       }
\     }
\ }}
\ )
command! -nargs=0 Pdb silent call vimspector#LaunchWithConfigurations({
\    "run": {
\      "adapter": "debugpy",
\      "filetypes": [ "python" ],
\      "default": v:true,
\      "configuration": {
\        "request": "launch",
\        "program": "${file}",
\        "cwd": "${workspaceRoot}"
\      }
\    }})
command! -nargs=0 Dlv silent call vimspector#LaunchWithConfigurations({
\   "run": {
\     "adapter": "vscode-go",
\     "filetypes": [ "go" ],
\     "default": v:true,
\     "configuration": {
\       "request": "launch",
\       "program": "${fileDirname}",
\       "cwd": "${workspaceRoot}",
\       "port": 36577,
\       "stopOnEntry": v:true,
\       "mode": "debug",
\       'trace': v:true,
\       'env': { 'GO111MODULE': 'off' }
\     }
\   }})
" https://github.com/phoityne/hdx4vsc
" stack install haskell-dap ghci-dap haskell-debug-adapter
" (mkdir -p ~/tmp/stack_sh && cd ~/tmp/stack_sh && stack new sample --bare && stack test)
" this is not working: it times out
command! -nargs=0 Hsd silent call vimspector#LaunchWithConfigurations({
\   "run-stack": {
\     "adapter": {
\       "command": [ "haskell-debug-adapter" ]
\     },
\     "configuration": {
\       "type": "ghc",
\       "request": "launch",
\       "workspace": "${workspaceRoot}",
\       "name": "haskell-debug-adapter",
\       "internalConsoleOptions": "openOnSessionStart",
\       "startup": "${workspaceRoot}/app/Main.hs",
\       "startupFunc": "",
\       "startupArgs": "",
\       "stopOnEntry": v:true,
\       "mainArgs": "",
\       "ghciPrompt": "H>>= ",
\       "ghciInitialPrompt": "Prelude>",
\       "ghciCmd": "stack ghci --test --no-load --no-build --main-is TARGET",
\       "ghciEnv": {},
\       "logFile": "${workspaceRoot}/hdx4vim.log",
\       "logLevel": "WARNING",
\       "forceInspect": v:false
\     }
\   }
\ })

nnoremap L :m .+1<CR>==
nnoremap H :m .-2<CR>==
vnoremap L :m '>+1<CR>gv=gv
vnoremap H :m '<-2<CR>gv=gv

runtime ftplugin/man.vim
if has("gui_running")
    nnoremap K :<C-U>exe "Man" v:count "<C-R><C-W>"<CR><CR>
endif

set path+=**
set keymodel=startsel,stopsel
set selection=exclusive
set noswapfile
filetype plugin indent off
set history=700
set autoread
set isfname-=: " to make gF open file:line
set isfname+=@-@ " adds @ to isfname
set iskeyword=@,48-57,_,180-255 "word delimiters
set fillchars+="fold: "
set foldmethod=marker
set foldmarker='++-,-++'
set showtabline=0
set scrolloff=1
set wildmenu
set wildoptions=pum
set cmdheight=2
set hidden
set nobackup
set nowb
set autowriteall
set backspace=indent,eol,start
set ignorecase
set smartcase
set hlsearch
set incsearch
set lazyredraw
set magic
set showmatch
set mat=2
set noerrorbells
set novisualbell
set t_vb=
set tm=500
set mousehide
set nowrap
set ffs=unix,dos,mac
if has("multi_byte") " type '8g8' to find illegal utf8
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  set fileencodings=ucs-bom,utf-8,latin1,cp1251
endif
set list
set listchars=tab:→\ ,eol:\ ,trail:·
set nosmarttab
set noautoindent
set nosmartindent
set indentexpr=
filetype indent off
set shiftwidth=4
set tabstop=4
set softtabstop=0
set expandtab
set clipboard=unnamed
map <middlemouse> <nop>
imap <middlemouse> <nop>
nnoremap <X1Mouse> <C-O>
nnoremap <X2Mouse> <C-I>
set tags=./.tags;,.tags,./tags,tags;
if filereadable($MY.'/.tags')
  set tags+=$MY/.tags
endif
set errorformat=%f:%l:%c:%m
set errorformat+=%f:%l:%m
set errorformat+=%f(%l)\ :\ %m
set errorformat+=%f:%l\\,\ E:%n:\ %m
set errorformat+=\|\|\ %f:%l:%m
"makeprg set by vim-makeshift
if has("gui_running") " || has('nvim')
  " nvim -i produces zsh zle warning on neovim system(), but not in vim
  " https://github.com/neovim/neovim/issues/13126
  set shellcmdflag=-ic
endif
set diffopt+=iwhite
syntax on
set background=dark

set maxmempattern=2000000

" colorscheme roland1  " much green
" colorscheme roland2
colorscheme murphy
" set termguicolors            " 24 bit color
" colorscheme aurora
" colorscheme dracula
" colorscheme sonokai
" colorscheme snazzy    " nvcode
if has("gui_running")
    set guicursor=n-c:block-Cursor/lCursor-blinkon0
    set guicursor+=i-ci:ver30-Cursor/lCursor-blinkon0
    set guicursor+=r-cr:hor20-Cursor/lCursor
    set guicursor+=v:ver50-Cursor/lCursor-blinkon0
    set lines=999
    set columns=175
    winpos 0 0
    set guiheadroom=0
    set guioptions=ak
    if has("win32")
        "set guifont=DejaVu\ Sans\ Mono:h9:cANSI
        "set guifont=Inconsolata\ Bold\ 10
        if filereadable("C:/Windows/Fonts/FreeMonoBoldOEL1S.ttf")
            set guifont=FreeMono\ OEL1S:h10:b:cANSI
        else
            set guifont=FreeMono:h10:b:cANSI
        endif
    else
        if filereadable($HOME."/.local/share/fonts/FreeMonoOEL1S.otf")
          set guifont=FreeMono\ OEL1S\ Bold\ 11
        elseif filereadable($HOME."/.local/share/fonts/DejaVuSansMonoOEL2SD.ttf")
          set guifont=DejaVu\ Sans\ Mono\ OEL2S\ Bold\ 9
        else
          set guifont=FreeMono\ Bold\ 11
        endif
    endif
  endif
let g:terminal_ansi_colors = [ "#373c40", "#ff5454", "#8cc85f", "#e3c78a",
  \ "#80a0ff", "#ce76e8", "#7ee0ce", "#de935f", "#f09479", "#f74782",
  \ "#42cf89", "#cfcfb0", "#78c2ff", "#ae81ff", "#85dc85", "#e2637f" ]
"check width
set colorcolumn=+1
set grepprg=ag\ --vimgrep\ $*
set grepformat=%f:%l:%c:%m

"otherwise markdown replaces characters in lines, but the current
set conceallevel=0

"set cursorcolumn
"set cursorline

" line number
"set relativenumber


if g:CompleteJediViaCoc
    "coc
    " not too small because see 6447 statusline issue
    " set updatetime=1300
    set shortmess+=c
    if !has('nvim')
      "set signcolumn=number
      set signcolumn=yes
    else
      sign define numhl=
    endif
endif

"set number
set signcolumn=yes

augroup rolandau
    autocmd!
    " Return to last edit position when opening files
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g'\"" |
        \ endif

    autocmd BufReadPre *.rst setlocal suffixesadd=.rst
    autocmd BufReadPre *.py setlocal suffixesadd=.py
    autocmd BufReadPre *.yml setlocal suffixesadd=.yml

    autocmd BufEnter * :syntax sync fromstart

    autocmd BufEnter * :set equalprg=
    autocmd BufEnter *.py :set equalprg=autopep8\ -
    autocmd BufEnter *.js :set equalprg=js-beautify\ -
    autocmd BufEnter *.html :set equalprg=js-beautify\ --type\ html\ -
    autocmd BufEnter *.go :set equalprg=gofmt
    autocmd BufEnter *.c :set equalprg=clang-format\ -i
    autocmd BufEnter *.cpp :set equalprg=clang-format\ -i
augroup END
"": `:JJ` for `:Autoformat`
command! -bar -nargs=0 -range=% J :<line1>,<line2>Autoformat
"": `:J` for `:AutoformatLine`
command! -bar -nargs=0 JJ :AutoformatLine
""" `SC`: code format
vmap <silent> SC :FormatLines<CR>
nmap <silent> SC :FormatCode<CR>
""" `st`: trim spaces
vmap <silent> st :TrimSpaces<CR>

" trailing whitespaces:
function! s:TrimSpaces() range
  let @/='\v(\s+$)|( +\ze\t)'
  let oldhlsearch=&hlsearch
  let &hlsearch=1
  execute a:firstline.",".a:lastline."substitute ///ge"
  let &hlsearch=oldhlsearch
endfunction
"": `:TrimSpaces` accepts range
command! -bar -nargs=0 -range=% TrimSpaces <line1>,<line2>call <SID>TrimSpaces()

function! s:DoPrettyXML()
  let l:origft = &ft
  set ft=
  1s/<?xml .*?>//e
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  2d
  $d
  silent %<
  1
  exe "set ft=" . l:origft
endfunction
"": `:PrettyXML` format XML
command! PrettyXML call <SID>DoPrettyXML()

function! s:Edit(filepath)
  if isdirectory(a:filepath)
    execute "FZF ".fnameescape(a:filepath)
  else
    execute "e ".fnameescape(a:filepath)
  endif
endfunction
"": `:E` use FZF
command! -nargs=1 -complete=file E call <SID>Edit(<q-args>)

function! HexEdit(filepath)
  let l:tmpfile = fnameescape(tempname()).a:filepath
  silent! execute '!xxd -ps '.a:filepath.' '.l:tmpfile
  execute "e ".l:tmpfile
endfunction
"": `:HE` posix hex dump of a (binary) file
command! -nargs=1 -complete=file HE  call HexEdit(<q-args>)

"": `:L` close window
command! L :close

function! StplRstTag()
  let cpos = getpos('.')[1]
  let cline = getline(cpos)
  let tcline = trim(cline,' .:,;?!}{')
  call setpos('.',[0,1,1,0])
  let [lnum,lcol] = searchpos('^\.\. _','n')
  let tagfn = split(getline(lnum),'\W\+', 0)[1]
  let tagline = '% __'.tagfn.'("'.tcline.'")'
  let tagid = ".. _`".tagfn.join(split(tcline,'\W\+', 0),'')."`:"
  call setline(cpos,tagid)
  call append(cpos,tagline)
  call setpos('.',[0,cpos,1,0])
endfunction
"": `:SS` stpl template tag line with RST tag
command! SS call StplRstTag()
function! RstTag()
  let cpos = getpos('.')[1]
  let cline = getline(cpos)
  let tcline = trim(cline,' .:,;?!')
  let tagid = ".. _`".join(split(tcline,'\W\+', 0),'')."`:"
  call append(cpos-1,tagid)
endfunction
"": `:RR` insert RST tag based on current line
command! RR call RstTag()

function! s:SearchThisVisual(direction, ffilter) range
  let l:saved_reg = @"
  execute "normal! vgvy"
  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")
  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  elseif a:direction == 'f'
    execute "normal /" . l:pattern . "^M"
  elseif a:direction == 'gv'
    if a:ffilter == ''
      let allbufs = range(0, bufnr('$'))
      let res = []
      for b in allbufs
        if buflisted(b)
          call add(res, bufname(b))
        endif
      endfor
      let l:ffilter = join(res)
    else
      let l:ffilter = a:ffilter
    endif
    let @g="vimgrep " . '/'. l:pattern . '/ ' . l:ffilter
  elseif a:direction == 'replace'
    let @g="%s" . '/'. l:pattern . '/'
  endif
  let @/ = l:pattern
  let @" = l:saved_reg
endfunction
""" `*#`: search down|up for visual region
vnoremap <silent> * :call <SID>SearchThisVisual('f', '')<CR>
vnoremap <silent> # :call <SID>SearchThisVisual('b', '')<CR>
""" `,gr`: specify replace for visual region
vnoremap <leader>gr :call <SID>SearchThisVisual('replace', '')<CR>:<C-U><C-R>=@g<CR>
""" `,gg`: vimgrep specify or visual region
""" `,gb`: vimgrep in buffers
nnoremap <leader>gg :vimgrep // **/*<C-B><S-right><right><right>
vnoremap <leader>gg :call <SID>SearchThisVisual('gv', '**/*')<CR>:<C-U><C-R>=@g<CR>
vnoremap <leader>gb :call <SID>SearchThisVisual('gv', '')<CR>:<C-U><C-R>=@g<CR><CR>

""" `,gf`: make file under curser if it does not exist yet
nnoremap <leader>gf :e <cfile><cr>
""" `sgf`: open file with current line as name
nnoremap sgf yy:call EfileInline("<C-R>"<BS>")<cr>
function! EfileInline(filename)
    :exe "e ". fnameescape(a:filename)
endfu

" read from a ex or shell command into a new scratch buffer
function! s:Redir(cmd)
  for win in range(1, winnr('$'))
    if getwinvar(win, 'scratch')
      execute win . 'windo close'
    endif
  endfor
  if a:cmd =~ '^!'
    let output = system(matchstr(a:cmd, '^!\zs.*'))
  else
    redir => output
    execute a:cmd
    redir END
  endif
  botright vnew
  let w:scratch = 1
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, split(output, "\n"))
endfunction
"": `:Redir` either shell or vim command
command! -nargs=+ -complete=command Redir silent call <SID>Redir(<q-args>)

function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call <SID>DiffWithSaved()

if has('win32')
  set diffexpr=<SID>MyDiff()
  function s:MyDiff()
    let opt = '-a --binary '
    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    if $VIMRUNTIME =~ ' '
      if &sh =~ '\<cmd'
        if empty(&shellxquote)
          let l:shxq_sav = ''
          set shellxquote&
        endif
        let cmd = '"' . $VIMRUNTIME . '\diff"'
      else
        let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
      endif
    else
      let cmd = $VIMRUNTIME . '\diff'
    endif
    silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
    if exists('l:shxq_sav')
      let &shellxquote=l:shxq_sav
    endif
  endfunction
endif

""" `Y`: yank till end of line, like D
nnoremap Y y$
""" `s`: <nop>, free for other mappings
map <silent> s <nop>
map <silent> S <nop>
map <silent> s2 :set number<CR>
map <silent> s0 :set nonumber<CR>
""" `{sj sk}`: Insert empty line below|above
nnoremap <silent> sk o<ESC>k
nnoremap <silent> sj O<ESC>j
""" `SR`: Replace from default register without loosing it
vnoremap SR "_c<C-R>"<esc>
nnoremap SR "_ciw<C-R>"<esc>
""" `{jk}=g{jk}`: treat as break lines when wrap on
map j gj
map k gk
""" `+-`: numberpad quickfix move
nnoremap <kPlus>      :cnext<CR>
nnoremap <kMinus>     :cprev<CR>
""" `*:`: numberpad tags move
nnoremap <kMultiply>  :tn<CR>
nnoremap <kDivide>    :tp<CR>
""" `sx`: syntax fromstart
nnoremap sx <ESC>:syntax sync fromstart<CR>
""" `<A-{kjhl}>`: go to window
"": `:F{Ff}` font size
command! FF :let &guifont=substitute(&guifont,'\(:h\| \)\@<=\d\+','\=eval(submatch(0)+2)','g')
command! FFF :let &guifont=substitute(&guifont,'\(:h\| \)\@<=\d\+','\=eval(submatch(0)+6)','g')
command! FFFF :let &guifont=substitute(&guifont,'\(:h\| \)\@<=\d\+','\=eval(submatch(0)+8)','g')
command! Ff :let &guifont=substitute(&guifont,'\(:h\| \)\@<=\d\+','\=eval(submatch(0)-2)','g')
command! Fff :let &guifont=substitute(&guifont,'\(:h\| \)\@<=\d\+','\=eval(submatch(0)-6)','g')
command! Ffff :let &guifont=substitute(&guifont,'\(:h\| \)\@<=\d\+','\=eval(submatch(0)-8)','g')
""" `,s`: save current buffer
nnoremap <leader>s :update<CR>
""" `,S`: commit current buffer to git
nnoremap <leader>S :Gw<CR>:Gcommit<CR>
""" `,b{d w}`: delete/wipe buffer, but not window
map <leader>bd :bp<bar>sp<bar>bn<bar>bd<CR>
map <leader>bw :bp<bar>sp<bar>bn<bar>bw<CR>
""" `,l{ramkj}`: load russian accents mathematic fntc english
nmap <leader>lr :set keymap=russian-jcukenwin<CR>
nmap <leader>la :set keymap=accents<CR>
nmap <leader>lm :set keymap=mathematic<CR>
nmap <leader>lj :set keymap=<CR>
nmap <leader>lk :set keymap=fntc<CR>
""" `,ls`: load spelling
nmap <leader>ls :setlocal spell spelllang=
""" `,e{ecdgfwvpmis}`: edit home|company|dotfiles|git|fork|workspace|vim|vimre(p)os|my|install|snippets
nmap <leader>ee :e $MY/y${Y2}.rst<CR>
nmap <leader>ec :e $HOME/$COMPANY/my/y${Y4}.rst<CR>
nmap <leader>ed :cd ~/mine/dotfiles<CR>:Files<CR>
nmap <leader>eg :E ~/mine<CR>
nmap <leader>ef :E ~/myforks<CR>
nmap <leader>ew :exe "FZF ".fnameescape(system('git rev-parse --show-toplevel')[:-2])."/.."<CR>
nmap <leader>ev :e $MYVIMRC<CR>
nmap <leader>ep :E <C-R>=g:dein_path<CR>/../..<CR>
nmap <leader>em :cd $MY<CR>:Files<CR>
nmap <leader>ei :e ~/mine/dotfiles/install<CR>
nmap <leader>es :e ~/mine/dotfiles/etc/vim/UltiSnips/all.snippets<CR>
map <silent> se :call UltiSnips#RefreshSnippets()<CR>
"vim-scripts/vcscommand.vim
""" `,tt`: google translate
nnoremap <silent> <leader>tt :Trans<CR>
vnoremap <silent> <leader>tt :Trans<CR>
""" `,ww`: look up in wordnet (wn needed)
nnoremap <leader>ww :!wn <C-R><C-W> -over<CR>
""" `sc[c]`: (re)number
vnoremap scc :!cat -n<CR>
vnoremap sc :<bs><bs><bs><bs><bs>let c=0\|'<,'>g/^\s*\d\+/let c=c+1\|s/\d\+/\=c<CR>
""" `sp, spp`: yank current file path or dir
nnoremap <silent> sp :let @* = expand("%:p")<CR>
nnoremap <silent> spp :let @* = expand("%:p:h")<CR>
""" `m`: match in o v n mode
onoremap <silent>m //e<CR>
vnoremap <silent>m //e<CR>
nnoremap <silent>n //<CR>
"": `:SD` cd to current file
command! SD cd %:p:h
""" `SD`: cd to current symlinked file
nnoremap <silent> SD :cd <C-R>=fnamemodify(resolve(expand('%:p')),':p:h')<CR><CR>
""" `sd`: cd to directory under cursor
if has('nvim')
nnoremap <silent> sd yy:cd <C-R>"<CR>
else
nnoremap <silent> sd yy:cd <C-R>"<BS><CR>
endif
"": `:TD` execute .local/bin/todo to quickfix list
command! TD :cexpr system('~/.local/bin/todo --vimgrep')

"": `:CC` vim_py3_rst CK then open quickfix list
cabbrev CC exec 'py3 import rstdoc;vim_query_kws([],rstdoc.dcx.rexkw,False)'<bar>copen

cmap RG Rg
""" `SW`: fzf search for word under cursor and strings containing it
map <silent> SW :call histadd("cmd",'Rg <C-R><C-W>')<CR>:call setreg('/','<C-R><C-W>')<CR>:Rg <C-R><C-W><CR>
""" `SWW`: fzf search for word under cursor
map <silent> SWW :call histadd("cmd",'Rg \b<C-R><C-W>\b')<CR>:call setreg('/','\b<C-R><C-W>\b')<CR>:Rg \b<C-R><C-W>\b<CR>
command! -bang -nargs=* -complete=file Rgg call <SID>Rgg(<f-args>)
function! s:Rgg(...)
  call fzf#vim#grep('rg --column --line-number --no-heading --color=always --smart-case '.(a:0?join(a:000,' '):'.'), 1,
        \ fzf#vim#with_preview({'dir': system('git -C '.expand('%:p:h').' rev-parse --show-toplevel 2> /dev/null')[:-2]}))
endfunction
let g:MYDIRS=$MY.'/dirs'
command! -nargs=* Rgs call <SID>Rgs(<f-args>)
function! s:Rgs(...)
  call fzf#vim#grep('xargs -d "\n" -a '.g:MYDIRS.' rg --column --line-number --no-heading --color=always --smart-case '.(a:0?join(a:000,' '):'.'), 1, fzf#vim#with_preview({}))
endfunction

""" `TS`: :TScratch with 8 lines
nnoremap <silent> TS :TScratch<CR>:resize 8<CR>
""" `SE`: restore existing zsh on the right side
map <silent> SE :vsplit<CR><C-W><C-W>:b zsh<CR>
""" `SE,SF`: restore existing zsh on the right side (with path of file)
map <silent> SE :vsplit<CR><C-W><C-W>:b zsh<CR>
map <silent> SF spp:vsplit<CR><C-W><C-W>:b zsh<CR>cd <C-W>"*<CR>
" cscope
if has("cscope")
        set cscopetag
        set csprg=cscope
        set csto=0
        set cst
        set nocsverb
        " add any database in current directory
        if filereadable("cscope.out")
            cs add cscope.out
        " else add database pointed to by environment
        elseif $CSCOPE_DB != ""
            cs add $CSCOPE_DB
        endif
        set csverb
endif
""" `,f{sgctefid}`: cscope find
nmap <leader>fs :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <leader>fg :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <leader>fc :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <leader>ft :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <leader>fe :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <leader>ff :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>fi :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <leader>fd :cs find d <C-R>=expand("<cword>")<CR><CR>
""" `<C-n>`: NERDTreeToggle
map <C-n> :NERDTreeToggle<CR>
""" `gx{lngpw}`: open local, nonlocal; chromium google,python,wikipedia
vnoremap <silent> gxl "cy:call netrw#BrowseX("<C-R>=expand("%:p:h")<CR>/<C-R>c",0)<CR><CR>
vnoremap <silent> gxn "cy:call netrw#BrowseX("<C-R>c",0)<CR><CR>
nnoremap <silent> gxl :call netrw#BrowseX('<C-R>=expand("%:p:h")<CR>/<C-R>=expand("<cWORD>")<CR>',0)<CR>
nnoremap <silent> gxn :call netrw#BrowseX('<C-R>=expand("<cWORD>")<CR>',0)<CR>
if has("win32")
vnoremap <silent> gxg "cy:!start /b cmd /c chrome "www.google.com/search?q=<C-R>c"<CR>
vnoremap <silent> gxp "cy:!start /b cmd /c chrome "http://docs.python.org/3/search.html?q=<C-R>c&check_keywords=yes&area=default"<CR>
vnoremap <silent> gxw "cy:!start /b cmd /c chrome "https://www.wikipedia.org/search-redirect.php?language=en&search=<C-R>c"<CR>
nnoremap <silent> gxg :!start /b cmd /c chrome "http://www.google.com/search?q=<C-R><C-L>"<CR>
nnoremap <silent> gxp :!start /b cmd /c chrome "http://docs.python.org/3/search.html?q=<cword>&check_keywords=yes&area=default"<CR>
nnoremap <silent> gxw :!start /b cmd /c chrome "https://www.wikipedia.org/search-redirect.php?language=en&search=<cword>"<CR>
else
vnoremap <silent> gxg "cy:exe ':silent !chromium "www.google.com/search?q=<C-R>c"&'<CR>
vnoremap <silent> gxp "cy:exe ':silent !chromium "http://docs.python.org/3/search.html?q=<C-R>c&check_keywords=yes&area=default"&'<CR>
vnoremap <silent> gxw "cy:exe ':silent !chromium "https://www.wikipedia.org/search-redirect.php?language=en&search=<C-R>c"&'<CR>
nnoremap <silent> gxg :exe ':silent !chromium "http://www.google.com/search?q=<C-R><C-L>"&'<CR>
nnoremap <silent> gxp :exe ':silent !chromium "http://docs.python.org/3/search.html?q=<cword>&check_keywords=yes&area=default"&'<CR>
nnoremap <silent> gxw :exe ':silent !chromium "https://www.wikipedia.org/search-redirect.php?language=en&search=<cword>"&'<CR>
endif
""" `gx`: open browser and search
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
if has('nvim')
tnoremap <ESC> <C-\><C-N>
tnoremap <expr> <C-R> '<C-\><C-N>"'.nr2char(getchar()).'pi'
else
" tnoremap <ESC> <C-W><C-N>
tnoremap <C-R> <C-W>"
endif
tnoremap <A-h> <C-\><C-N><C-w>h
tnoremap <A-j> <C-\><C-N><C-w>j
tnoremap <A-k> <C-\><C-N><C-w>k
tnoremap <A-l> <C-\><C-N><C-w>l
inoremap <A-h> <C-\><C-N><C-w>h
inoremap <A-j> <C-\><C-N><C-w>j
inoremap <A-k> <C-\><C-N><C-w>k
inoremap <A-l> <C-\><C-N><C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l
""" `,v{tbipg(g)c(c)rskq(q)hj(j)...}`: vert term TmuxBashIpythonPerlGhciGGoClingC#RScalaKotlinssQlpHpJuliaJava...
if has('nvim')
lua<<EOF
local termGroup = vim.api.nvim_create_augroup("TermGroup", { clear = true })
vim.api.nvim_create_autocmd({ "BufEnter" }, {
	callback = function()
		vim.cmd("startinsert")
	end,
	pattern = { "term://*" },
	group = termGroup,
})
M=require("toggleterm")
M.setup{
  size = function(term)
    if term.direction == "horizontal" then
      return 15
    elseif term.direction == "vertical" then
      return vim.o.columns * 0.5
    end
  end,
  hide_numbers = true,
  autochdir = false,
  start_in_insert = true,
  persist_size = true,
  direction = 'vertical',
  close_on_exit = true,
  auto_scroll = true,
}
vim.keymap.set("n", "<leader>v", function()
  M.new()
  vim.cmd('wincmd p')
  vim.cmd('stopinsert')
end
)
vim.keymap.set("n", "<leader>m", function()
  M.send_lines_to_terminal("single_line", true, { args = 1 })
  vim.cmd('norm! j')
end
)
EOF
else
nnoremap <silent> <leader>v :vert botright term<CR><C-W><C-W>
nnoremap <silent> <leader>vt :vert botright term tmux new-session -A -s vim<CR><C-W><C-W>
nnoremap <silent> <leader>vb :vert botright term bash<CR><C-W><C-W>
nnoremap <silent> <leader>vi :vert botright term ipython<CR><C-W><C-W>
nnoremap <silent> <leader>vii :vert botright term irb<CR><C-W><C-W>
nnoremap <silent> <leader>vp :vert botright term re.pl<CR><C-W><C-W>
nnoremap <silent> <leader>vg :vert botright term ghci<CR><C-W><C-W>
nnoremap <silent> <leader>vgg :vert botright term gore<CR><C-W><C-W>
nnoremap <silent> <leader>vc :vert botright term root<CR><C-W><C-W>
nnoremap <silent> <leader>vcc :vert botright term csharp<CR><C-W><C-W>
nnoremap <silent> <leader>vr :vert botright term R<CR><C-W><C-W>
nnoremap <silent> <leader>vs :vert botright term scala<CR><C-W><C-W>
nnoremap <silent> <leader>vk :vert botright term kotlin<CR><C-W><C-W>
nnoremap <silent> <leader>vq :vert botright term sqlite3<CR><C-W><C-W>
nnoremap <silent> <leader>vqq :vert botright term psql<CR><C-W><C-W>
nnoremap <silent> <leader>vh :vert botright term psysh<CR><C-W><C-W>
nnoremap <silent> <leader>vj :vert botright term julia<CR><C-W><C-W>
nnoremap <silent> <leader>vjj :vert botright term jshell<CR><C-W><C-W>
nnoremap <silent> <leader>vl :vert botright term planck<CR><C-W><C-W>
nnoremap <silent> <leader>vll :vert botright term clj<CR><C-W><C-W>
nnoremap <silent> <leader>vn :vert botright term deno<CR><C-W><C-W>
nnoremap <silent> <leader>vnn :vert botright term nix repl<CR><C-W><C-W>
nnoremap <silent> <leader>vo :vert botright term octave<CR><C-W><C-W>
nnoremap <silent> <leader>vm :vert botright term ocaml<CR><C-W><C-W>
nnoremap <silent> <leader>v9 :vert botright term j9 --console<CR><C-W><C-W>
nnoremap <silent> <leader>va :vert botright term lua -i<CR><C-W><C-W>
nnoremap <silent> <leader>vx :vert botright term iex<CR><C-W><C-W>
nnoremap <silent> <leader>ve :vert botright term evcxr<CR><C-W><C-W>
nnoremap <silent> <leader>vu :vert botright term guile<CR><C-W><C-W>
nnoremap <silent> <leader>vw :vert botright term racket<CR><C-W><C-W>
nnoremap <silent> <leader>vd :vert botright term dub run drepl<CR><C-W><C-W>
nnoremap <silent> <leader>vy :vert botright term interactive<CR><C-W><C-W>
nnoremap <leader>m yy<C-W><C-W><C-W>""<C-W><C-P>j
nnoremap <leader>mm 0dwyy<C-W><C-W><C-W>""<C-W><C-P>uj
nnoremap <leader>me yiw<C-W><C-W>echo $<C-W>""<CR><C-W><C-P>
vnoremap <leader>m y<C-W><C-W><C-W>""<CR><C-W><C-P>gv<ESC>j
vnoremap <leader>me y<C-W><C-W>echo <C-W>""<CR><C-W><C-P>gv<ESC>
""" `,hh`: haskell block
vnoremap <leader>hh y<C-W><C-W>:{<CR><C-W>""<CR>:}<CR><C-W><C-W>gv<ESC>j
nnoremap <leader>hh yiw<C-W><C-W>:hoogle <C-W>""<CR><C-W><C-W>
""" `,{vv mv}`: vim eval
vnoremap <leader>vv y:@"<CR>j
nnoremap <leader>vv yy:@"<CR>j
vnoremap <leader>mv y:echo <C-R>"<CR>
nnoremap <leader>mv yiw:echo <C-R>"<CR>
""" `,j2`: to jira ("pip install rst2jira" needed}
map <leader>j2 :py3 tojira()<CR>
""" `,bb`: run in bash
nnoremap <leader>bb :.w !bash<CR>
vnoremap <leader>bb y:!bash -c '<C-R>"'<CR>
endif

""" `,m[m]`: run[echo] in term (two windows: one of them term)

"" plugins
"junegunn/fzf.vim
let g:fzf_layout = { 'window': 'enew' }

" - Popup window (center of the current window)
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true } }

" - Popup window (anchored to the bottom of the current window)
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true, 'yoffset': 1.0 } }
""" `sf` : fzf Files GFiles
map <silent> sf :Files<CR>
""" `sg` : fzf GFiles
map <silent> sg :CG<CR>:GFiles<CR>
""" `sh`: fzf History
map <silent> sh :History<CR>
""" `sb`: fzf Buffers
map <silent> sb :Buffers<CR>
""" `sl`: fzf Lines
map <silent> sl :Lines<CR>
""" `s{.;:/}`: fzf Buffer tags, tags, : or / history
map <silent> s. :BTags<CR>
map <silent> s; :Tags<CR>
map <silent> s: :History:<CR>
map <silent> s/ :History/<CR>
let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'
""" `ss`: fzf Snippets
map <silent> ss :Snippets<CR>
""" `SS`: fzf Files in repos of recent files
map <silent> SS :Rgs<CR>
map <silent> SG :Rgg<CR>
"godlygeek/tabular
""" `,aa`: :Tabular
map <leader>aa :Tab/
"scrooloose/nerdtree
""" `sn`: NERDTreeToggle
nmap sn :NERDTreeToggle<CR>
""" `sv`: Vista finder using fzf
nmap sv :Vista finder<CR>
"": `:CD` cd to root of repos
command! CD exe 'cd '.system('git rev-parse --show-toplevel')
function s:CG()
  execute 'SD'
  execute 'CD'
endfunction
command! -nargs=0 CG :call <SID>CG()

if g:CompleteJediViaCoc
    "coc
    nmap <leader>i :CocEnable<CR>:autocmd! coc_nvim BufWritePre *<CR>:echom 'Coc Enabled'<CR>
    nmap <leader>ii :CocDisable<CR>
    let g:coc_user_config['suggest.triggerCompletionWait'] = 500
    "let g:coc_user_config['suggest.autoTrigger'] = 'trigger'
    "inoremap <silent><expr> <c-space> coc#refresh()
    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction
    if exists('*complete_info')
      inoremap <expr> <CR> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
    else
      inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    endif
    """ `{[]}g` coc diagnostic next/prev
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)
    """ `g{dyir}` coc go to definition/type/implementation/reference
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
    """ `KK` coc documentation (K is man page)
    nnoremap <silent> KK :call <SID>show_documentation()<CR>
    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocActionAsync('doHover')
      endif
    endfunction
    """ `rn` rename
    nmap <leader>rn <Plug>(coc-rename)
    """ `lf` format
    xmap <leader>lf  <Plug>(coc-format-selected)
    nmap <leader>lf  <Plug>(coc-format-selected)
    augroup cocau
      autocmd!
      autocmd CursorHold * silent call CocActionAsync('highlight')
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end
    """ `l{ac}` coc load codeaction for selected (a) or all (c)ode
    xmap <leader>la  <Plug>(coc-codeaction-selected)
    nmap <leader>la  <Plug>(coc-codeaction-selected)
    nmap <leader>lc  <Plug>(coc-codeaction)
    """ `lc` coc fix current
    nmap <leader>qf  <Plug>(coc-fix-current)
    """ `{ia}{fc}` coc select inside/outside function/class
    xmap if <Plug>(coc-funcobj-i)
    omap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap af <Plug>(coc-funcobj-a)
    xmap ic <Plug>(coc-classobj-i)
    omap ic <Plug>(coc-classobj-i)
    xmap ac <Plug>(coc-classobj-a)
    omap ac <Plug>(coc-classobj-a)
    """ `<C-s>` select next range
    nmap <silent> <C-s> <Plug>(coc-range-select)
    xmap <silent> <C-s> <Plug>(coc-range-select)
    "": `:Format` coc format
    command! -nargs=0 Format :call CocAction('format')
    "": `:Fold` coc fold
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)
    "": `:OR` coc organize import
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
    """ `<space>`X coc list (a)diagnostic/(e)xtension/(c)ommand/(o)utline/(s)ymbols (p)resume (j/k) next/prev
    nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<CR>
    nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<CR>
    nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<CR>
    nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<CR>
    nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<CR>
    nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
    nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
    nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
    "end coc
endif

"": `:MM` build using Makeshift
function! s:BuildFun(what2build)
    execute 'Makeshift'
    execute 'MakeshiftBuild '.a:what2build
endfunction
command! -nargs=* MM :call <SID>BuildFun(<q-args>)
if !exists($PYTHONSTARTUP)
  py3file $PYTHONSTARTUP
endif
py3 << EOF
import locale
locale.setlocale(locale.LC_ALL, '')
if sys.path[0]!='.':
    sys.path.insert(0,'.')
try:
    from docutils.core import publish_string
    from rst2confluence import confluence
    def tojira():
      vim.current.range[:]=publish_string(
        vim_current_range()[0],writer=confluence.Writer()).splitlines()
except: pass
EOF
""i `FENV #!/usr/bin/env`
iab FENV #!/usr/bin/env
""i `FENC # -*- coding: utf-8 -*-
iab FENC # -*- coding: utf-8 -*-
""i `VIML # vim: ts=4 sw=4 sts=4 et noai nocin nosi inde=`
iab VIML # vim: ts=4 sw=4 sts=4 et noai nocin nosi inde=
""i `Ydate 2020-07-11`
iab Ydate <C-R>=strftime("%Y-%m-%d")<CR>
""i `YY 20200711`
iab YY <C-R>=strftime("%Y%m%d")<CR>
""i `YYY 20200711Sa`
iab YYY <C-R>=strftime("%Y%m%d%a")[:-2]<CR>
""i `iGU B6785F62-0A3B-4AFF-A5AA-0AFB2FEEF9F3`
iab iGU <C-R>=py3eval("str(uuid.uuid4()).upper()")<CR>
""i `t50282011072020`
iab iT t<C-R>=strftime("%S%M%H%d%m%Y")<CR>
iab KK .. {{{<CR><ESC>0i.. }}}<ESC>kA
iab TTT <C-R>=localtime()<CR>

dig ll 2113
dig II 120129
dig NN 8469
dig ZZ 8484
dig QQ 8474
dig RR 8477
dig CC 8450
dig @e 601 "ə schwa
dig @a 592 "ɐ open-mid schwa
dig @C 643 "ʃ vl postalveolar fricative
dig @c 658 "ʒ vd postalveolar fricative
dig @R 641 "ʁ vd uvular fricative
dig @X 967 "χ vl uvular fricative
dig @l 654 "ʎ italian gli, castillian ll

dig Ck 9812 "♔
dig Cq 9813 "♕
dig Cr 9814 "♖
dig Cb 9815 "♗
dig Cn 9816 "♘
dig Cp 9817 "♙
dig CK 9818 "♚
dig CQ 9819 "♛
dig CR 9820 "♜
dig CB 9821 "♝
dig CN 9822 "♞
dig CP 9823 "♟︎

if !has('nvim')
" :echo ShowHex()
function! ShowHex()
  let p = getpos('.')
  redir => ucode
  " silent normal! g8
  silent normal! ga
  redir End
  call setpos('.',p)
  " return '['.trim(ucode).']'
  try
      return '['.trim(split(split(ucode,'Hex')[1],',')[0]).']'
  catch
  endtry
endfunction
endif

function! ChangeStatuslineColor()
  if (mode() =~# '\v(n|no)')
    exe 'hi! StatusLine ctermfg=008'
  elseif (mode() =~# '\v(v|V)' || g:currentmode[mode()] ==# 'V·Block' || get(g:currentmode, mode(), '') ==# 't')
    exe 'hi! StatusLine ctermfg=005'
  elseif (mode() ==# 'i')
    exe 'hi! StatusLine ctermfg=004'
  else
    exe 'hi! StatusLine ctermfg=006'
  endif
  return ''
endfunction
function! GitInfo()
  if !exists('fugitive#head')
    return ''
  endif
  let git = fugitive#head()
  if git != ''
    return ''.fugitive#head().''
  else
    return ''
  endif
endfunction
set statusline= " --------- left side ---------
set statusline+=%1*[%n] " buffer number
set statusline+=%m " modified
set statusline+=%2*%{GitInfo()}
set statusline+=%1*%f " file
set statusline+=%=%< " --------- right side ---------
set statusline+=%2*%{getcwd()}\> " dir
set statusline+=%0*\[%{&ff}] " fileformat
set statusline+=\[%{&fenc==\"\"?&enc:&fenc}] " (file) encoding
set statusline+=%y " filetype
set statusline+=%r " readonly flag
set statusline+=%w " preview flag
set statusline+=%2*%p%%(%L)%04v,%04l " c, l = % (total lines)
"if g:CompleteJediViaCoc
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"endif
set statusline+=%{&spelllang}
set statusline+=%{strftime('%H:%M')}
set laststatus=2

set wildignore=
set wildignore+=tags
set wildignore+=**/build/**/*
set wildignore+=**/*prebuilt/**/*
set wildignore+=**/dist/**/*
set wildignore+=**/*egg-info/**/*
set wildignore+=**/_links*
set wildignore+=**/_build/**/*
set wildignore+=**/_static/**/*
set wildignore+=**/*doctree*
"set wildignore+=**/temp/**/*
set wildignore+=**/.git/**/*
"set wildignore+=**/*."csv
set wildignore+=**/.hg/**/*
set wildignore+=**/.svn/**/*
set wildignore+=**/.vs/**/*
set wildignore+=**/.lock-waf*
set wildignore+=**/__pycache__/**/*
set wildignore+=**/*.o
set wildignore+=**/*.i
set wildignore+=**/*.s
set wildignore+=**/*.pyc
set wildignore+=**/*.sdf
set wildignore+=**/*.suo
set wildignore+=**/*.iobj
set wildignore+=**/*.dll
set wildignore+=**/*.exe
set wildignore+=**/*.ilk
set wildignore+=**/*.pdb
set wildignore+=**/*.opendb
set wildignore+=**/*.ipdb
set wildignore+=**/*.obj
set wildignore+=**/*.pch
set wildignore+=**/*.cache
set wildignore+=**/*.tlog
set wildignore+=**/*.VC.db
set wildignore+=**/cscope.out
set wildignore+=**/node_modules/**/*

autocmd BufReadPost *.odt :%!odt2txt "%"
autocmd BufReadPost *.docx :%!docx2txt "%"
autocmd BufReadPost *.pdf :%!pdf2txt.py "%"

let &guifont=substitute(&guifont,'\(:h\| \)\@<=\d\+','\=eval(submatch(0)+8)','g')

"HowMuch
vmap S? <Plug>AutoCalcAppend
vmap S?S <Plug>AutoCalcAppendWithSum
vmap S?+ <Plug>AutoCalcAppendWithEq
vmap S?++ <Plug>AutoCalcAppendWithEqAndSum
vmap S?? <Plug>AutoCalcReplace
vmap S??s <Plug>AutoCalcReplaceWithSum

"use command `bpy` to run blender
py3 << EOF
blenderimports='import bpy'
def py3_blender_imports():
    global blenderimports
    rngstr,_ = vim_current_range()
    blenderimports = rngstr
def py3_current_range_to_blender():
    global blendersession
    global blendercmd
    global blenderimports
    try:
      blendercmd = f'{(int(blendercmd)+1):0>#4d}'
    except NameError:
      import tempfile
      blendersession=tempfile.mkdtemp()
      blendercmd = f'{0:0>#4d}'
    tfn = os.path.join(blendersession,blendercmd)
    print(tfn)
    rngstr,_ = vim_current_range()
    if len(rngstr) == 0:
      rngstr = '\n'.join(vim.current.buffer)
    rngstr = f'import sys\nsys.path+=["{os.path.split(vim.current.buffer.name)[0]}"]\n{blenderimports}\n'+rngstr
    with open(tfn,'w') as f:
      f.write(rngstr)
    with open('/tmp/bpy_externall.io','w') as tob:
      tob.write(tfn)
EOF
map <silent> SB :py3 py3_current_range_to_blender()<CR>
map <silent> SI :py3 py3_blender_imports()<CR>

function! TC(lang)
  let l:res=system('tmpc '.a:lang)
  let l:dir=split(l:res,"\n")[-1]
  execute "e ".l:dir
endfunction
command! -nargs=1 -complete=file TC call TC(<q-args>)

" No color codes
command! -nargs=0 Nc %s/\e\[[0-9;]*m//g

