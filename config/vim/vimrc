"
" Vim: configuration file
" Written by Fnux. Inspired by ayekat's config.
"
"-----------------------"
" {NeoBundle Scripts} "
"-----------------------"

if has('vim_starting')
  if &compatible
    set nocompatible               " Be iMproved
  endif

  " Required:
  set runtimepath+=/home/fnux/.config/vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('/home/fnux/.config/vim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" Add or remove your Bundles here:
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'tpope/vim-fugitive'
" NeoBundle 'ctrlpvim/ctrlp.vim'
" NeoBundle 'flazz/vim-colorschemes'
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'elixir-lang/vim-elixir'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'scrooloose/nerdtree'

" You can specify revision/branch/tag.
NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }

" Required:
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

"--------"
" {Misc} "
"--------"

cmap w!! w !sudo tee % >/dev/null 

set mouse=a
set showcmd  
set backspace=2
set autoindent
set copyindent

" Disable Arrow keys in Escape mode
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Disable Arrow keys in Insert mode
"imap <up> <nop>
"imap <down> <nop>
"imap <left> <nop>
"imap <right> <nop>

" Remap HJKL

"vnoremap k h
"vnoremap l j
"vnoremap ö k
"vnoremap ä l

"nnoremap k h
"nnoremap l j
"nnoremap ö k
"nnoremap ä l

let mapleader=","

" Save the undo tree
if v:version >= 703
	if ! isdirectory($HOME . "/.vim/undo")
		call mkdir($HOME . "/.vim/undo", "p")
	endif
	set undofile
	" Save it in ~/.vim/undo/ if possible, otherwise same dir as edited file
	set undodir=$HOME/.vim/undo,.
endif

" I wanna see tabs and trailing whitespaces:
set list
set listchars=tab:→\ ,eol:\ ,trail:·

" Eclim

" map <C-c> :JavaCorrect<cr>
" nnoremap <silent> <buffer> <leader>i :JavaImport<cr>
" nnoremap <silent> <buffer> <leader>p :JavaDocSearch -x declarations<cr>
" nnoremap <silent> <buffer> <leader>o :JavaSearchContext<cr>
" nnoremap <silent> <buffer> <leader>p :JavaDocComment<cr>


" Use spaces instead of tabs
set expandtab
set tabstop=4
set shiftwidth=4

" Nerdtree
map <C-m> :NERDTreeToggle<CR>

" open a NERDTree automatically when vim starts up if no files were specified
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif


"--------"
" {Look} "
"--------"

" Enable 256 colours mode (we handle the TTY case further below):
set t_Co=256

" Display and format line numbers:
set number
set numberwidth=4

" Enable UTF-8 (I wanna see Umlauts!):
set encoding=utf8

"----------"
" {Colors} "
"----------"

" Statuline mode
hi I_mode ctermfg=8 ctermbg=45
hi N_mode ctermfg=8 ctermbg=148
hi V_mode ctermfg=8 ctermbg=208

" command statusline:
hi cmd_mode              ctermfg=15  ctermbg=64
hi cmd_info              ctermfg=48   ctermbg=0

" default statusline:
hi StatusLine            ctermfg=0   ctermbg=236 cterm=none
hi StatusLineNC          ctermfg=8   ctermbg=236 cterm=none

"-----------"
" {Synthax} "
"-----------"

" Without any syntax highlighting, programming is a pain:
syntax on

" Fix unrecognised file types:
au BufRead,BufNewFile *.md setl filetype=markdown
au BufRead,BufNewFile *.tex setl filetype=tex
au BufRead,BufNewFile *.xbm setl filetype=c
au BufRead,BufNewFile *.frag,*.vert,*.geom,*.glsl setl filetype=glsl"
au BufRead,BufNewFile vimrc,redshift.conf setl filetype=cfg
au BufRead,BufNewFile *.target setl filetype=systemd
au BufRead,BufNewFile *.muttrc setl filetype=muttrc
au BufRead,BufNewFile *.tool setl filetype=scala"
au BufRead,BufNewFile *.zone setl filetype=dns
au BufRead,BufNewFile *.smt setl filetype=lisp

"---------------"
" {Status Line} "
"---------------"

" Always display the statusline:
set laststatus=2

" Don't display the mode in the ruler; we display it in the statusline:
set noshowmode

" Separators
if $TERM == "linux"
	let gitsym=""
	let sep="|"
	let lnum="LN"
else
	let gitsym="⎇ "
	let sep="│"
	let lnum="L"
endif

" Active Statusline
function! StatuslineActive()
	let l:statusline = ''
	let l:mode = mode()
	let l:unite = unite#get_status_string()
	let l:git_branch = fugitive#head()

	" Mode
	if l:mode ==? 'v' || l:mode == ''
		let l:statusline .= '%#V_mode#'
		if l:mode ==# 'v'
			let l:statusline .= ' VISUAL '
		elseif l:mode ==# 'V'
			let l:statusline .= ' V·LINE '
		else
			let l:statusline .= ' V·BLOCK '
		endif
	elseif l:mode == 'i'
		let l:statusline .= '%#I_mode# INSERT '
	else
		let l:statusline .= '%#N_mode# NORMAL '
	endif

	" Git
	if l:git_branch != ''
		if l:mode == 'i'
			let l:statusline .= '%#I_git_branch# %{gitsym}'
		else
			let l:statusline .= '%#N_git_branch# %{gitsym}'
		endif
		let l:statusline .= l:git_branch
		if l:mode == 'i'
			let l:statusline .= ' %#I_git_sep#%{sep}'
		else
			let l:statusline .= ' %#N_git_sep#%{sep}'
		endif
	endif
	
	" Filename
	if l:mode == 'i'
		let l:statusline .= '%#I_file#'
	else
		let l:statusline .= '%#N_file#'
	endif
	let l:statusline.=' %<%{expand("%:p:h")}/'
	if l:mode == 'i'
		let l:statusline.='%#I_file_emphasise#'
	else
		let l:statusline.='%#N_file_emphasise#'
	endif
	let l:statusline.='%{expand("%:t")} '

	" Modified
	if &modified
		if l:mode == 'i'
			let l:statusline .= '%#I_file_modified#'
		else
			let l:statusline .= '%#N_file_modified#'
		endif
		let l:statusline .= '* '
	endif

	if l:mode == 'i'
		let l:statusline .= '%#I_middle# '
	else
		let l:statusline .= '%#N_middle# '
	endif

	" Readonly
	if &readonly
		if l:mode == 'i'
			let l:statusline .= '%#I_warning#X%#I_middle# '
		else
			let l:statusline .= '%#N_warning#X%#N_middle# '
		endif
	endif

	" Unite.vim
	if l:unite != ''
		let l:statusline .= ' '.l:unite
	endif

	let l:statusline .= '%='

	" File format, encoding, type, line count
	if l:unite == ''
		let l:ff = &fileformat
		let l:fe = &fileencoding
		let l:ft = &filetype
		if l:ff != 'unix' && l:ff != ''
			if l:mode == 'i'
				let l:statusline .= l:ff.' %#I_middle_sep#%{sep}%#I_middle#'
			else
				let l:statusline .= l:ff.' %#N_middle_sep#%{sep}%#N_middle#'
			endif
		endif
		if l:fe != 'utf-8' && l:fe != 'ascii' && l:fe != ''
			if l:mode == 'i'
				let l:statusline .= l:fe.' %#I_middle_sep#%{sep}%#I_middle#'
			else
				let l:statusline .= l:fe.' %#N_middle_sep#%{sep}%#N_middle#'
			endif
		endif
		if l:ft != ''
			if l:mode == 'i'
				let l:statusline .= l:ft.' %#I_middle_sep#%{sep}%#I_middle#'
			else
				let l:statusline .= l:ft.' %#N_middle_sep#%{sep}%#N_middle#'
			endif
		endif
		let l:statusline .= ' %{lnum} %L '
	endif

	" Buffer position
	if l:mode == 'i'
		let l:statusline .= '%#I_pos#'
	else
		let l:statusline .= '%#N_pos#'
	endif
	let l:statusline .= ' %P '

	" Cursor position
	let l:statusline .= '%#N_cursor_line# %3l'
	let l:statusline .= '%#N_cursor_col#:%02c %#N_middle#'

	return l:statusline
endfunction

" Inactive Statusline
function! StatuslineInactive()
	let l:statusline = ''
	let l:branch = fugitive#head()
	let l:unite = unite#get_status_string()

	" mode:
	let l:statusline .= '        %{sep}'

	" filename:
	let l:statusline.=' %<%t %{sep}'

	" change to the right side:
	let l:statusline.='%='

	" line count:
	let l:statusline .= ' %{lnum} %L '

	" buffer position:
	let l:statusline.='%{sep} %P '

	" cursor position:
	let l:statusline .= '%{sep} %3l:%02c '

	return l:statusline
endfunction "

function! StatuslineCommand()
	return '%#cmd_mode# COMMAND %#cmd_mode_end#%{sep}'
endfunction

" define when which statusline is displayed:
au! BufEnter,WinEnter * setl statusline=%!StatuslineActive()
au! BufLeave,WinLeave * set  statusline=%!StatuslineInactive()
au! CmdwinEnter       * setl statusline=%!StatuslineCommand()

"----------------"
" {Line Numbers} "
"----------------"
" Make line number design change as a function of mode.

if $TERM != 'linux'
	set cursorline

	hi N_linenr         ctermfg=244 ctermbg=236
	hi N_linenr_cursor  ctermfg=148 ctermbg=8
	hi N_cursorline                 ctermbg=none
	hi V_linenr         ctermfg=208 ctermbg=52
	hi V_linenr_cursor  ctermfg=208 ctermbg=8
	hi V_cursorline                 ctermbg=none
	hi I_linenr         ctermfg=45  ctermbg=23
	hi I_linenr_cursor  ctermfg=45   ctermbg=8
	hi I_cursorline                 ctermbg=none

	function! SetLineNr(mode)
		hi clear LineNr
		hi clear CursorLineNr
		hi clear CursorLine
		if a:mode == 'i'
			" hi link LineNr       I_linenr
			hi link CursorLineNr I_linenr_cursor
			hi link CursorLine   I_cursorline
		elseif a:mode == 'v'
			" hi link LineNr       V_linenr
			hi link CursorLineNr V_linenr_cursor
			hi link CursorLine   V_cursorline
		else
			" hi link LineNr       N_linenr
			hi link CursorLineNr N_linenr_cursor
			hi link CursorLine   N_cursorline
		endif
	endfunction

	" insert mode:
	au! InsertLeave * call SetLineNr('n')
	au! InsertEnter * call SetLineNr('i')
	au BufEnter,WinEnter * call SetLineNr('n')

	" visual mode (ugly, since there is no VisualEnter/VisualLeave):
	noremap <silent> v :call SetLineNr('v')<CR>v
	noremap <silent> V :call SetLineNr('v')<CR>V
	noremap <silent> <C-v> :call SetLineNr('v')<CR><C-v>
	set updatetime=0
	au! CursorHold * call SetLineNr('n')
endif

"-------"
" {End} "
"-------"

